{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Yob Documentation Yob Has Been Taken off G Suite Marketplace As of 7/18/2021, Yob can no longer be installed. Google changed their policies regarding Yob's use of the user's Google Drive account to store graph data, which would potentially subject us to $75,000+ in 3rd-party security auditing fees. Due to this financial threat, we made the difficult choice to remove Yob from G Suite Marketplace entirely. We greatly apologize for the inconvenience. Overview Yob was a fast and simple graphing tool that was geared towards performing graphical analysis within Google Docs. Simple but powerful Making graphs in Yob was quick and easy, making it a great choice for users who just want to plot some data and stick the graph in a document. However, Yob also came with many advanced features such as calculated columns and non-linear curve fitting , making it a useful tool for more advanced users. Convenient Yob used to run entirely within a Google Doc, so you never had to worry about transferring graphs between your computer and the document. In fact, Yob blurred the lines between graph files and your document entirely. Getting Started Follow this tutorial to familiarize yourself with the basics of Yob. More advanced users can check out the references to learn more. Thank you for using Yob!","title":"Home"},{"location":"#yob-documentation","text":"Yob Has Been Taken off G Suite Marketplace As of 7/18/2021, Yob can no longer be installed. Google changed their policies regarding Yob's use of the user's Google Drive account to store graph data, which would potentially subject us to $75,000+ in 3rd-party security auditing fees. Due to this financial threat, we made the difficult choice to remove Yob from G Suite Marketplace entirely. We greatly apologize for the inconvenience.","title":"Yob Documentation"},{"location":"#overview","text":"Yob was a fast and simple graphing tool that was geared towards performing graphical analysis within Google Docs.","title":"Overview"},{"location":"#simple-but-powerful","text":"Making graphs in Yob was quick and easy, making it a great choice for users who just want to plot some data and stick the graph in a document. However, Yob also came with many advanced features such as calculated columns and non-linear curve fitting , making it a useful tool for more advanced users.","title":"Simple but powerful"},{"location":"#convenient","text":"Yob used to run entirely within a Google Doc, so you never had to worry about transferring graphs between your computer and the document. In fact, Yob blurred the lines between graph files and your document entirely.","title":"Convenient"},{"location":"#getting-started","text":"Follow this tutorial to familiarize yourself with the basics of Yob. More advanced users can check out the references to learn more. Thank you for using Yob!","title":"Getting Started"},{"location":"thankyou/","text":"Thank you! Thank you so much for donating to Yob! Your contribution will allow us to continue developing cool stuff! If you have any feedback, issues, or feature requests, do not hesitate to contact us at theyobteam@gmail.com .","title":"    "},{"location":"thankyou/#thank-you","text":"Thank you so much for donating to Yob! Your contribution will allow us to continue developing cool stuff! If you have any feedback, issues, or feature requests, do not hesitate to contact us at theyobteam@gmail.com .","title":"Thank you!"},{"location":"about/about/","text":"About Yob was a project started by Tanner Nielsen and Jordan Hendrickson in the spring of 2014 when we were in high school. It was motivated by our appreciation for the teacher of our physics class, as well as the dislike for the graphing software he had us use. Development When Yob began, we were developing in Java and our plans for the software were much too ambitious: We wanted not only to build a better graphing application, but also a complete assignment management platform through which the teacher could distribute their assignments and the students could complete them. We weren't experienced developers, but we managed to hack together an account system and beginnings of an assignment editor over the summer. The old login screen looked like this: To our surprise, the school decided to replace all of their laptops with Chromebooks when the next fall came around, which Java applications were not easily compatible with. Moreover, all of the teachers had started using Google Classroom, which made our software largely irrelevant. This was a huge setback for us and we nearly gave up, but we decided to start over and build our app with JavaScript, an entirely new language to us at the time. We also chose to scale back and focus on making a graphing application in the form of a Google Docs Add-on to complement Google Classroom. It was this decision and a few years of development that got the project to where it is today. If you're interested to learn a little more about Yob's development, a poster was made detailing more of our development process. Acknowledgements We owe a great debt of gratitude to Mr. Dean Roush , the Physics teacher at Luck High School, for helping us test and shape the software. This project would have never gotten off the ground without his patience and trust, would have never progressed so far without his willingness to test our software as it developed.","title":"About"},{"location":"about/about/#about","text":"Yob was a project started by Tanner Nielsen and Jordan Hendrickson in the spring of 2014 when we were in high school. It was motivated by our appreciation for the teacher of our physics class, as well as the dislike for the graphing software he had us use.","title":"About"},{"location":"about/about/#development","text":"When Yob began, we were developing in Java and our plans for the software were much too ambitious: We wanted not only to build a better graphing application, but also a complete assignment management platform through which the teacher could distribute their assignments and the students could complete them. We weren't experienced developers, but we managed to hack together an account system and beginnings of an assignment editor over the summer. The old login screen looked like this: To our surprise, the school decided to replace all of their laptops with Chromebooks when the next fall came around, which Java applications were not easily compatible with. Moreover, all of the teachers had started using Google Classroom, which made our software largely irrelevant. This was a huge setback for us and we nearly gave up, but we decided to start over and build our app with JavaScript, an entirely new language to us at the time. We also chose to scale back and focus on making a graphing application in the form of a Google Docs Add-on to complement Google Classroom. It was this decision and a few years of development that got the project to where it is today. If you're interested to learn a little more about Yob's development, a poster was made detailing more of our development process.","title":"Development"},{"location":"about/about/#acknowledgements","text":"We owe a great debt of gratitude to Mr. Dean Roush , the Physics teacher at Luck High School, for helping us test and shape the software. This project would have never gotten off the ground without his patience and trust, would have never progressed so far without his willingness to test our software as it developed.","title":"Acknowledgements"},{"location":"about/known_issues/","text":"Known Issues This page is dedicated to keeping you updated on any bugs that have been encountered with Yob. Browser Support Yob, being new software, has yet to go through extensive testing on different browsers. Currently, Google Chrome is our only officially supported browser. Yob will still work for the most part in other browsers, but we cannot guarantee that it will be fully functional. If we gain enough users, we will expand our offical support to other browsers such as Firefox. Known Issues Some business and school accounts may have security restrictions that prevent you from inserting graphs into the document. This is our top priority issue, but until we get is resolved, you can right click on the graph preview, click \"Save as image\", then manually upload the graph to your document. Zooming in to extremely small viewing windows may crash your browser At certain graph sizes, Functions and Curve Fits may render incorrectly: it will look as though another function is passing through it and the area between is filled. Loading Curve Fits from a saved graph will automatically make models custom. Graphs will occasionally load the wrong window if auto zoom is enabled.","title":"Known Issues"},{"location":"about/known_issues/#known-issues","text":"This page is dedicated to keeping you updated on any bugs that have been encountered with Yob.","title":"Known Issues"},{"location":"about/known_issues/#browser-support","text":"Yob, being new software, has yet to go through extensive testing on different browsers. Currently, Google Chrome is our only officially supported browser. Yob will still work for the most part in other browsers, but we cannot guarantee that it will be fully functional. If we gain enough users, we will expand our offical support to other browsers such as Firefox.","title":"Browser Support"},{"location":"about/known_issues/#known-issues_1","text":"Some business and school accounts may have security restrictions that prevent you from inserting graphs into the document. This is our top priority issue, but until we get is resolved, you can right click on the graph preview, click \"Save as image\", then manually upload the graph to your document. Zooming in to extremely small viewing windows may crash your browser At certain graph sizes, Functions and Curve Fits may render incorrectly: it will look as though another function is passing through it and the area between is filled. Loading Curve Fits from a saved graph will automatically make models custom. Graphs will occasionally load the wrong window if auto zoom is enabled.","title":"Known Issues"},{"location":"about/privacy_policy/","text":"Privacy Policy Last updated: June 09, 2021 Please read this Privacy Policy (\"Policy\", \"Agreement\") carefully before using the Yob Google Doc Add-on (the \"Service\", \"Software\") operated by The Yob Team (\"us\", \"we\", or \"our\"). Information Collection and Use We use Google Analytics strictly to inform and guide future decisions for the Service. We do not use Google Analytics to track, collect or upload any data that personally identifies an individual (such as a name, email address or billing information). We never collect any personal data or user-generated content (i.e., graphs) via Google Analytics. User Data Management We do not store any individual's graph data on our own servers (nor do we have any servers). All graph data is strictly kept within the user's own Google account. For detailed information about how this data is managed, see the Storing and Loading Reference .","title":"Privacy Policy"},{"location":"about/privacy_policy/#privacy-policy","text":"Last updated: June 09, 2021 Please read this Privacy Policy (\"Policy\", \"Agreement\") carefully before using the Yob Google Doc Add-on (the \"Service\", \"Software\") operated by The Yob Team (\"us\", \"we\", or \"our\").","title":"Privacy Policy"},{"location":"about/privacy_policy/#information-collection-and-use","text":"We use Google Analytics strictly to inform and guide future decisions for the Service. We do not use Google Analytics to track, collect or upload any data that personally identifies an individual (such as a name, email address or billing information). We never collect any personal data or user-generated content (i.e., graphs) via Google Analytics.","title":"Information Collection and Use"},{"location":"about/privacy_policy/#user-data-management","text":"We do not store any individual's graph data on our own servers (nor do we have any servers). All graph data is strictly kept within the user's own Google account. For detailed information about how this data is managed, see the Storing and Loading Reference .","title":"User Data Management"},{"location":"about/terms_of_service/","text":"Terms of Service Last updated: January 01, 2017 Please read these Terms of Service (\"Terms\", \"Terms of Service\", \"Agreement\") carefully before using the Yob Google Doc Add-on (the \"Service\", \"Software\") operated by The Yob Team (\"us\", \"we\", or \"our\"). Your access to and use of the Service is conditioned on your acceptance of and compliance with these Terms. These Terms apply to all visitors, users and others who access or use the Service. By accessing or using the Service you agree to be bound by these Terms. If you disagree with any part of the terms then you may not access the Service. Links To Other Web Sites and Services Our Service may contain links to third-party web sites or services that are not owned or controlled by The Yob Team. The Yob Team has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services. You further acknowledge and agree that The Yob Team shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such web sites or services. We strongly advise you to read the terms and conditions and privacy policies of any third-party web sites or services that you visit. Governing Law These Terms shall be governed and construed in accordance with the laws of Wisconsin, United States, without regard to its conflict of law provisions. Our failure to enforce any right or provision of these Terms will not be considered a waiver of those rights. If any provision of these Terms is held to be invalid or unenforceable by a court, the remaining provisions of these Terms will remain in effect. These Terms constitute the entire agreement between us regarding our Service, and supersede and replace any prior agreements we might have between us regarding the Service. Limitations on Liability We assume no legal responsibility for their misuse by end users, nor do we make any guarantees of their quality or reliability. Indemnity You agree to indemnify and hold The Yob Team, its subsidiaries, affiliates, officers, agents, and other partners and employees, harmless from any loss, liability, claim, or demand, including reasonable attorney's fees, made by any third party due to or arising out of your use of the Service in violation of this Agreement and/or arising from a breach of this Agreement. No Agency There is no agency, partnership, joint venture, employee-employer or franchisor-franchisee relationship between The Yob Team and any User of the Service. Changes We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material we will try to provide at least 30 days notice prior to any new terms taking effect. What constitutes a material change will be determined at our sole discretion. By continuing to access or use our Service after those revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, please stop using the Service. Contact Us If you have any questions about these Terms, please contact us.","title":"Terms of Service"},{"location":"about/terms_of_service/#terms-of-service","text":"Last updated: January 01, 2017 Please read these Terms of Service (\"Terms\", \"Terms of Service\", \"Agreement\") carefully before using the Yob Google Doc Add-on (the \"Service\", \"Software\") operated by The Yob Team (\"us\", \"we\", or \"our\"). Your access to and use of the Service is conditioned on your acceptance of and compliance with these Terms. These Terms apply to all visitors, users and others who access or use the Service. By accessing or using the Service you agree to be bound by these Terms. If you disagree with any part of the terms then you may not access the Service.","title":"Terms of Service"},{"location":"about/terms_of_service/#links-to-other-web-sites-and-services","text":"Our Service may contain links to third-party web sites or services that are not owned or controlled by The Yob Team. The Yob Team has no control over, and assumes no responsibility for, the content, privacy policies, or practices of any third party web sites or services. You further acknowledge and agree that The Yob Team shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such web sites or services. We strongly advise you to read the terms and conditions and privacy policies of any third-party web sites or services that you visit.","title":"Links To Other Web Sites and Services"},{"location":"about/terms_of_service/#governing-law","text":"These Terms shall be governed and construed in accordance with the laws of Wisconsin, United States, without regard to its conflict of law provisions. Our failure to enforce any right or provision of these Terms will not be considered a waiver of those rights. If any provision of these Terms is held to be invalid or unenforceable by a court, the remaining provisions of these Terms will remain in effect. These Terms constitute the entire agreement between us regarding our Service, and supersede and replace any prior agreements we might have between us regarding the Service.","title":"Governing Law"},{"location":"about/terms_of_service/#limitations-on-liability","text":"We assume no legal responsibility for their misuse by end users, nor do we make any guarantees of their quality or reliability.","title":"Limitations on Liability"},{"location":"about/terms_of_service/#indemnity","text":"You agree to indemnify and hold The Yob Team, its subsidiaries, affiliates, officers, agents, and other partners and employees, harmless from any loss, liability, claim, or demand, including reasonable attorney's fees, made by any third party due to or arising out of your use of the Service in violation of this Agreement and/or arising from a breach of this Agreement.","title":"Indemnity"},{"location":"about/terms_of_service/#no-agency","text":"There is no agency, partnership, joint venture, employee-employer or franchisor-franchisee relationship between The Yob Team and any User of the Service.","title":"No Agency"},{"location":"about/terms_of_service/#changes","text":"We reserve the right, at our sole discretion, to modify or replace these Terms at any time. If a revision is material we will try to provide at least 30 days notice prior to any new terms taking effect. What constitutes a material change will be determined at our sole discretion. By continuing to access or use our Service after those revisions become effective, you agree to be bound by the revised terms. If you do not agree to the new terms, please stop using the Service.","title":"Changes"},{"location":"about/terms_of_service/#contact-us","text":"If you have any questions about these Terms, please contact us.","title":"Contact Us"},{"location":"references/calculated_column_reference/","text":"Calculated Column Reference Calculated Columns allow you to generate new columns from other columns, saving you the time of manual data entry. This reference will discuss all that you need to know in order to make use of this powerful feature. If you are new to Calculated Columns, you may want to check the Advanced Data Sets tutorial to see them in action. Making a Calculated Column Each column of a Data Set has a calculated column menu that can be opened by clicking on the calculator icon in the top right of the column header. When you do so, you should see the following dialog: This is the Calculated Column menu. It is composed of three components. Going from top to bottom: Item Selector The Item Selector allows you to search for items by their human-readable names in the dropdown menu, and inserts their cooresponding reference name into the Calculated Column Expression using the Insert button. If you're interested in learning how these reference names work, visit the Referencing Other Items section of the Expression Reference . Calculated Column Expression If you're comfortable typing the reference names yourself, you can edit the Calculated Column Expression directly. This expression deterimines how the values of the column should be calculated. The How Columns are Calulated section explains this in greater detail. Enabled Toggle Enabling a Calculated Column automatically fills the column with values according to the Calculated Column Expression, and disables manual data entry. The Enabled Toggle turns this feature on or off. When it is on, the column's background will turn yellow and its values gray, to remind you that you cannot edit it manually. How Columns are Calculated When columns are being calculated, the values are copied over row by row . For example, if you had a column expression, d2c2 = d1c2/10 , this is how the data would be transferred: In situations where the calculated column depends on multiple columns, the same row by row process is used: Columns with Bad Values Because of the freedom we allow users in our table editor, it is possible to create columns with different lengths or missing/nonsense values. Yob will do its best to copy the data over in the same row by row fashion, but if it doesn't know what to do for a particular cell, the calculated value will be \"NaN\", for \"Not a Number\". Examples Calculated Columns are best understood through examples. Check out the Advanced Data Sets tutorial to see them in action.","title":"Calculated Column Reference"},{"location":"references/calculated_column_reference/#calculated-column-reference","text":"Calculated Columns allow you to generate new columns from other columns, saving you the time of manual data entry. This reference will discuss all that you need to know in order to make use of this powerful feature. If you are new to Calculated Columns, you may want to check the Advanced Data Sets tutorial to see them in action.","title":"Calculated Column Reference"},{"location":"references/calculated_column_reference/#making-a-calculated-column","text":"Each column of a Data Set has a calculated column menu that can be opened by clicking on the calculator icon in the top right of the column header. When you do so, you should see the following dialog: This is the Calculated Column menu. It is composed of three components. Going from top to bottom:","title":"Making a Calculated Column"},{"location":"references/calculated_column_reference/#item-selector","text":"The Item Selector allows you to search for items by their human-readable names in the dropdown menu, and inserts their cooresponding reference name into the Calculated Column Expression using the Insert button. If you're interested in learning how these reference names work, visit the Referencing Other Items section of the Expression Reference .","title":"Item Selector"},{"location":"references/calculated_column_reference/#calculated-column-expression","text":"If you're comfortable typing the reference names yourself, you can edit the Calculated Column Expression directly. This expression deterimines how the values of the column should be calculated. The How Columns are Calulated section explains this in greater detail.","title":"Calculated Column Expression"},{"location":"references/calculated_column_reference/#enabled-toggle","text":"Enabling a Calculated Column automatically fills the column with values according to the Calculated Column Expression, and disables manual data entry. The Enabled Toggle turns this feature on or off. When it is on, the column's background will turn yellow and its values gray, to remind you that you cannot edit it manually.","title":"Enabled Toggle"},{"location":"references/calculated_column_reference/#how-columns-are-calculated","text":"When columns are being calculated, the values are copied over row by row . For example, if you had a column expression, d2c2 = d1c2/10 , this is how the data would be transferred: In situations where the calculated column depends on multiple columns, the same row by row process is used: Columns with Bad Values Because of the freedom we allow users in our table editor, it is possible to create columns with different lengths or missing/nonsense values. Yob will do its best to copy the data over in the same row by row fashion, but if it doesn't know what to do for a particular cell, the calculated value will be \"NaN\", for \"Not a Number\".","title":"How Columns are Calculated"},{"location":"references/calculated_column_reference/#examples","text":"Calculated Columns are best understood through examples. Check out the Advanced Data Sets tutorial to see them in action.","title":"Examples"},{"location":"references/curve_fit_reference/","text":"Curve Fit Reference Curve Fits are a key feature for Yob. They are setup to work well \"right out of the box,\" but they are also highly customizable. This guide is meant to serve as a reference for using Curve Fits. If you are new using Curve Fits, you may want to check out one of the following tutorials first: Getting Started - Finding Project Distance Advanced Curve Fits General Rules At a minimum, Curve Fits need to know which Data Set to use, and what type of Model to fit to the data. Curve Fits need sufficient data to work properly. In general, complex models need more data than simple models. Built-in Models Curve Fits come with the following built-in models: Model Name Expression Constant cf(x) = C Proportional cf(x) = A*x Linear cf(x) = A*x + B Quadratic cf(x) = A*x^2 + B*x + C Cubic cf(x) = A*x^3 + B*x^2 + C*x + D Quartic cf(x) = A*x^4 + B*x^3 + C*x^2 + D*x + F Quintic cf(x) = A*x^5 + B*x^4 + C*x^3 + D*x^2 + F*x + G Power cf(x) = A*x^B Inverse cf(x) = A / x Inverse Square cf(x) = A / (x^2) Sinusoid cf(x) = A*sin(B*x + C) + D Exponential cf(x) = A*B^x Natural Exponential cf(x) = A*e^(B*x) Logarithmic cf(x) = A + B*log(x) Natural Logarithmic cf(x) = A + B*ln(x) Gaussian cf(x) = A*e^(-(x-B)^2 / C^2) + D Normalized Gaussian cf(x) = (1 / (S*sqrt(2*\u03c0))) * e^(-(x-M)^2 / (2*S^2)) Logistic cf(x) = A / (1 + e^(-B*x + C)) Custom Models Curve Fits also support user-defined models. Note that all the rules of Yob expressions apply. See the Expression Reference for more details. Regression Methods Curve fits attempt to find the best model parameters by minimizing the sum of the differences between the outputs and predicted outputs (residuals) in some form or another. Yob supports several different methods of solving this problem, but by far the most common (and default) is the Ordinary Least Squares (OLS) algorithm. More details for each method are described below. OLS - Ordinary Least Squares The Ordinary Least Squares algorithm is the most robust and general purpose algorithm, making it suitable for almost any data. It finds the best model parameters by minimizing the sum of the squared residuals. In mathematical terms, it tries to minimize . Since the residuals are squared, points that are further away from the curve are more harshly penalized than points that are close. LAD - Least Absolute Deviations The Least Absolute Deviations algorithm attempts to minimize the sum of the absolute residuals, as opposed to the squared residuals like OLS. In mathematical terms, it tries to minimize . Since the residuals are not squared, this algorithm can handle outliers marginally better than OLS, however , unlike OLS, there are some cases where multiple solutions exist which can cause instability . WLS_1Y - Weighted Least Squares, 1 / Y Both OLS and LAD assume that error is distributed evenly throughout the data, which is not always the case. Take a look at the following data for example: You can see that the error gets larger as Y gets larger. The Weighted Least Squares algorithm is a variation on OLS that addresses this problem by weighting each residual so that it pays extra attention to data points that have small Y values, and pays less attention to points with large Y values, since it is assumed that they have greater amounts of error. In mathematical terms, the algorithm tries to minimize . For this particular version of WLS, . The use cases of this algorithm are more limited than OLS, but recoginzing when it's appropriate to apply it can make a big difference in your experiment. This is demonstrated graphically in the next variation of WLS below. WLS_1Y2 - Weighted Least Squares, 1 / Y 2 This variation on WLS functions just like the previous one, the only difference being that . The graph below shows the differences between a line fitted with OLS and a line fitted with WLS, using the data from the previous example: Guess Parameters The curve fitting algorithms in Yob work by taking an intial set of parameters (or guess parameters) for a model, and iteratively improving them until the optimal parameters are found. The following example illustrates this concept: Suppose we have some data that we are trying to fit a sinusoid model to. The sinusoid model is expressed by A*sin(B*x + C) + D , which means that the model parameters are A, B, C, and D. If we pick a few reasonable values for these parameters we might get a curve like the green dashed line below. Using this starting point, Yob will repeatedly try new values for the parameters that are in the neighborhood of the intial values. If the new values result in a curve that better fits the data, Yob will use those values as the new starting point and continue searching for better ones. When Yob can no longer improve the model, Yob will display the fitted model in the graph preview (here it is the solid blue line), and display the optimal parameter values in the Parameter Output section . Manual vs Automatic By default, Curve Fits automatically generate guess parameters for you. However, if you wish to supply your own guess parameters, you can check the Manual Guess check box and edit the number fields below it: Note For all of the built-in models, you shouldn't have to worry about picking guess parameters since Yob automatically picks good guesses for them. However , since picking guess parameters requires extra knowlege about the behavior of the model, Yob cannot automatically pick guess parameters for custom models . (At least, not good ones.) Parameter Output The fitted parameters of a Curve Fit can be found in the Parameter Output section. The example below shows the parameters for a quadratic model: Along with the fitted parameters, various metrics for goodness of fit are presented, including the Root Mean Square Error (RMSE), the Coefficient of Determination (R 2 ), and the Correlation Coefficient (R).","title":"Curve Fit Reference"},{"location":"references/curve_fit_reference/#curve-fit-reference","text":"Curve Fits are a key feature for Yob. They are setup to work well \"right out of the box,\" but they are also highly customizable. This guide is meant to serve as a reference for using Curve Fits. If you are new using Curve Fits, you may want to check out one of the following tutorials first: Getting Started - Finding Project Distance Advanced Curve Fits","title":"Curve Fit Reference"},{"location":"references/curve_fit_reference/#general-rules","text":"At a minimum, Curve Fits need to know which Data Set to use, and what type of Model to fit to the data. Curve Fits need sufficient data to work properly. In general, complex models need more data than simple models.","title":"General Rules"},{"location":"references/curve_fit_reference/#built-in-models","text":"Curve Fits come with the following built-in models: Model Name Expression Constant cf(x) = C Proportional cf(x) = A*x Linear cf(x) = A*x + B Quadratic cf(x) = A*x^2 + B*x + C Cubic cf(x) = A*x^3 + B*x^2 + C*x + D Quartic cf(x) = A*x^4 + B*x^3 + C*x^2 + D*x + F Quintic cf(x) = A*x^5 + B*x^4 + C*x^3 + D*x^2 + F*x + G Power cf(x) = A*x^B Inverse cf(x) = A / x Inverse Square cf(x) = A / (x^2) Sinusoid cf(x) = A*sin(B*x + C) + D Exponential cf(x) = A*B^x Natural Exponential cf(x) = A*e^(B*x) Logarithmic cf(x) = A + B*log(x) Natural Logarithmic cf(x) = A + B*ln(x) Gaussian cf(x) = A*e^(-(x-B)^2 / C^2) + D Normalized Gaussian cf(x) = (1 / (S*sqrt(2*\u03c0))) * e^(-(x-M)^2 / (2*S^2)) Logistic cf(x) = A / (1 + e^(-B*x + C))","title":"Built-in Models"},{"location":"references/curve_fit_reference/#custom-models","text":"Curve Fits also support user-defined models. Note that all the rules of Yob expressions apply. See the Expression Reference for more details.","title":"Custom Models"},{"location":"references/curve_fit_reference/#regression-methods","text":"Curve fits attempt to find the best model parameters by minimizing the sum of the differences between the outputs and predicted outputs (residuals) in some form or another. Yob supports several different methods of solving this problem, but by far the most common (and default) is the Ordinary Least Squares (OLS) algorithm. More details for each method are described below.","title":"Regression Methods"},{"location":"references/curve_fit_reference/#ols-ordinary-least-squares","text":"The Ordinary Least Squares algorithm is the most robust and general purpose algorithm, making it suitable for almost any data. It finds the best model parameters by minimizing the sum of the squared residuals. In mathematical terms, it tries to minimize . Since the residuals are squared, points that are further away from the curve are more harshly penalized than points that are close.","title":"OLS - Ordinary Least Squares"},{"location":"references/curve_fit_reference/#lad-least-absolute-deviations","text":"The Least Absolute Deviations algorithm attempts to minimize the sum of the absolute residuals, as opposed to the squared residuals like OLS. In mathematical terms, it tries to minimize . Since the residuals are not squared, this algorithm can handle outliers marginally better than OLS, however , unlike OLS, there are some cases where multiple solutions exist which can cause instability .","title":"LAD - Least Absolute Deviations"},{"location":"references/curve_fit_reference/#wls_1y-weighted-least-squares-1-y","text":"Both OLS and LAD assume that error is distributed evenly throughout the data, which is not always the case. Take a look at the following data for example: You can see that the error gets larger as Y gets larger. The Weighted Least Squares algorithm is a variation on OLS that addresses this problem by weighting each residual so that it pays extra attention to data points that have small Y values, and pays less attention to points with large Y values, since it is assumed that they have greater amounts of error. In mathematical terms, the algorithm tries to minimize . For this particular version of WLS, . The use cases of this algorithm are more limited than OLS, but recoginzing when it's appropriate to apply it can make a big difference in your experiment. This is demonstrated graphically in the next variation of WLS below.","title":"WLS_1Y - Weighted Least Squares, 1 / Y"},{"location":"references/curve_fit_reference/#wls_1y2-weighted-least-squares-1-y2","text":"This variation on WLS functions just like the previous one, the only difference being that . The graph below shows the differences between a line fitted with OLS and a line fitted with WLS, using the data from the previous example:","title":"WLS_1Y2 - Weighted Least Squares, 1 / Y2"},{"location":"references/curve_fit_reference/#guess-parameters","text":"The curve fitting algorithms in Yob work by taking an intial set of parameters (or guess parameters) for a model, and iteratively improving them until the optimal parameters are found. The following example illustrates this concept: Suppose we have some data that we are trying to fit a sinusoid model to. The sinusoid model is expressed by A*sin(B*x + C) + D , which means that the model parameters are A, B, C, and D. If we pick a few reasonable values for these parameters we might get a curve like the green dashed line below. Using this starting point, Yob will repeatedly try new values for the parameters that are in the neighborhood of the intial values. If the new values result in a curve that better fits the data, Yob will use those values as the new starting point and continue searching for better ones. When Yob can no longer improve the model, Yob will display the fitted model in the graph preview (here it is the solid blue line), and display the optimal parameter values in the Parameter Output section .","title":"Guess Parameters"},{"location":"references/curve_fit_reference/#manual-vs-automatic","text":"By default, Curve Fits automatically generate guess parameters for you. However, if you wish to supply your own guess parameters, you can check the Manual Guess check box and edit the number fields below it: Note For all of the built-in models, you shouldn't have to worry about picking guess parameters since Yob automatically picks good guesses for them. However , since picking guess parameters requires extra knowlege about the behavior of the model, Yob cannot automatically pick guess parameters for custom models . (At least, not good ones.)","title":"Manual vs Automatic"},{"location":"references/curve_fit_reference/#parameter-output","text":"The fitted parameters of a Curve Fit can be found in the Parameter Output section. The example below shows the parameters for a quadratic model: Along with the fitted parameters, various metrics for goodness of fit are presented, including the Root Mean Square Error (RMSE), the Coefficient of Determination (R 2 ), and the Correlation Coefficient (R).","title":"Parameter Output"},{"location":"references/expression_reference/","text":"Expression Reference Expressions are used extensively throughout Yob. Calculated Columns, Functions, and custom Curve Fits all make use of user-defined expressions. This page is meant to serve as a reference for using expressions throughout the program. If you are new to using expressions, you may want to check out one of the following tutorials first: Advanced Curve Fits - Custom Models Advanced Data Sets General Rules All expressions should follow the general syntax of mathematics. Order of operations applies. All operators need to be explicit. For example, you cannot write 2x ; you would have to write 2*x instead. How to Tell When an Expression is Valid In all of the places that you can edit expressions within Yob, the text field will let you know when your expression is invalid by turning its border red: Referencing Other Items Part of what makes expressions so effective is their ability to refer to other items. Accomplishing this is simple: To reference a Function , simply use its name as you would when using built-in functions like sin(x) or abs(x). For example, f1(x + 2) + f2(x - 2) would be a valid way to reference Functions in an expression. To reference a Curve Fit , the same principle applies but names are denoted with \"cf\" rather than \"f\". For example, cf1(x / 3) + sin(x) would be a valid way to reference a Curve Fit in an expression. To reference a Data Set Column , use the Data Set name along with the column name. For example, d1c2 would reference the second column of the first Data Set. However, only Calculated Column expressions are allowed to reference Data Set Columns. This is demonstrated in the Advanced Data Sets tutorial and explained in greater detail in the Calculated Columns Reference . Maintaining Referential Integrity Allowing users to put references in their expressions gives them a lot of freedom, but doing to makes it necessary to impose a few restrictions to maintain referential integrity. Essentially, this just means that if an expression refers to another item, The item needs to exist . For example, f3(x) + 4 is not a valid expression if there are only 2 Functions that exist. Yob will recognize when this condition is not met and will consider it an invalid expression . The reference cannot create circular dependencies . For example, consider the following function definitions: f1(x) = f2(x) + 1 , f2(x) = f1(x) - 1 If you look closely, you can probably see that trying to evaluate one of these functions would be rather unproductive. Yob will also recognize when this condition is not met and will consider it an invalid expression . Removing Items When you have several items that depend on each other, it can be problematic to remove one of them. Luckily, Yob automatically adapts the remaining items upon deletion to keep your intent in tact. Before it does so however, Yob will alert you if the item you're deleting is referenced in other expressions: Ok will proceed with the deletion and make any necessary adaptions, and Cancel will abort the deletion. To resolve dependencies with the items that reference the deleted item, Yob will adapt your data in several ways: Index Shifting (Applies to All Items) Since all items are numbered, removing an item can affect the numbering of other items. Here's an example of how Yob would resolve an applicable situation: Here, if we simply removed f2 , there would be a gap between f1 and f3 . To fix this, Yob simply shifts the indices of any functions after f2 (in this case, only f3 ) down by one. This causes f3 to now be f2 , but f1 's expression depended on f3 rather than f2 . Yob corrects this by modifying f1 's expression, as you can see in the image above. Function Substitution (Functions and Curve Fits Only) When a Function or Curve Fit is removed, and another expression depends upon it directly, Yob will replace all references to it with the contents of its expression. In the example above, cf1 's expression happened to be 0.485*x + 3.071 . Dependency Removal (Calculated Columns Only) When a Data Set is removed, and a Calculated Column expression references one of its columns, nothing can be done to sensibly retain the expression. Yob will disable the Calculated Column and clear its expression. This leaves the data untouched, but the values will no longer be calculated. The Independent Variable Functions and Curve Fits both make use of the independent variable. In most cases, this is simply known as x , which is the case for f1(x) = sin(x) and cf1(x) = A*x + B . However, some situations might warrant a more descriptive independent variable. Consider the example where you are plotting distance against time. In this scenario, it might make more sense for the independent variable to be t instead. This can be changed in the Labels menu: Note Changing this field will automatically update any affected expressions. For example, the cf1(x) = A*x + B example would become cf1(t) = A*t + B . Built-in Operators Yob expressions can contain any of these built-in operators: Operator Description + Addition - Subtraction * Multiplication / Division ^ Exponentiation Built-in Functions Yob expressions can contain any of these built-in functions: Name Description sqrt(x) Square root of x ln(x) Natural log (base e) of x log(x) Log (base 10) of x log10(x) Log (base 10) of x (for those who wish to be explicit) abs(x) Absolute value of x floor(x) Floor of x (round down) ceil(x) Ceiling of x (round up) round(x) x rounded to the nearest integer random(x) Random value between 0 and x sin(x) Sine of x (in radians) cos(x) Cosine of x (in radians) tan(x) Tangent of x (in radians) csc(x) Cosecant of x (in radians) sec(x) Secant of x (in radians) cot(x) Cotangent of x (in radians) asin(x) Inverse Sine (or Arcsine) of x (in radians) acos(x) Inverse Cosine (or Arccosine) of x (in radians) atan(x) Inverse Tangent (or Arctangent) of x (in radians) acsc(x) Inverse Cosecant (or Arccosecant) of x (in radians) asec(x) Inverse Secant (or Arcsecant) of x (in radians) acot(x) Inverse Cotangent (or Arccotangent) of x (in radians) sinh(x) Hyperbolic Sine of x cosh(x) Hyperbolic Cosine of x tanh(x) Hyperbolic Tangent of x csch(x) Hyperbolic Cosecant of x sech(x) Hyperbolic Secant of x coth(x) Hyperbolic Cotangent of x asinh(x) Inverse Hyperbolic Sine of x acosh(x) Inverse Hyperbolic Cosine of x atanh(x) Inverse Hyperbolic Tangent of x acsch(x) Inverse Hyperbolic Cosecant of x asech(x) Inverse Hyperbolic Secant of x acoth(x) Inverse Hyperbolic Cotangent of x Built-in Constants Yob expressions can contain any of these built-in constants: Name Numeric Value Accepted Formats E 2.71828182846 E, e Pi 3.14159265359 PI, pi, \u03c0 Tau 6.28318530718 TAU, tau, \u03c4 Phi 1.61803398874 PHI, phi, \u03c6, \u03d5","title":"Expression Reference"},{"location":"references/expression_reference/#expression-reference","text":"Expressions are used extensively throughout Yob. Calculated Columns, Functions, and custom Curve Fits all make use of user-defined expressions. This page is meant to serve as a reference for using expressions throughout the program. If you are new to using expressions, you may want to check out one of the following tutorials first: Advanced Curve Fits - Custom Models Advanced Data Sets","title":"Expression Reference"},{"location":"references/expression_reference/#general-rules","text":"All expressions should follow the general syntax of mathematics. Order of operations applies. All operators need to be explicit. For example, you cannot write 2x ; you would have to write 2*x instead. How to Tell When an Expression is Valid In all of the places that you can edit expressions within Yob, the text field will let you know when your expression is invalid by turning its border red:","title":"General Rules"},{"location":"references/expression_reference/#referencing-other-items","text":"Part of what makes expressions so effective is their ability to refer to other items. Accomplishing this is simple: To reference a Function , simply use its name as you would when using built-in functions like sin(x) or abs(x). For example, f1(x + 2) + f2(x - 2) would be a valid way to reference Functions in an expression. To reference a Curve Fit , the same principle applies but names are denoted with \"cf\" rather than \"f\". For example, cf1(x / 3) + sin(x) would be a valid way to reference a Curve Fit in an expression. To reference a Data Set Column , use the Data Set name along with the column name. For example, d1c2 would reference the second column of the first Data Set. However, only Calculated Column expressions are allowed to reference Data Set Columns. This is demonstrated in the Advanced Data Sets tutorial and explained in greater detail in the Calculated Columns Reference .","title":"Referencing Other Items"},{"location":"references/expression_reference/#maintaining-referential-integrity","text":"Allowing users to put references in their expressions gives them a lot of freedom, but doing to makes it necessary to impose a few restrictions to maintain referential integrity. Essentially, this just means that if an expression refers to another item, The item needs to exist . For example, f3(x) + 4 is not a valid expression if there are only 2 Functions that exist. Yob will recognize when this condition is not met and will consider it an invalid expression . The reference cannot create circular dependencies . For example, consider the following function definitions: f1(x) = f2(x) + 1 , f2(x) = f1(x) - 1 If you look closely, you can probably see that trying to evaluate one of these functions would be rather unproductive. Yob will also recognize when this condition is not met and will consider it an invalid expression .","title":"Maintaining Referential Integrity"},{"location":"references/expression_reference/#removing-items","text":"When you have several items that depend on each other, it can be problematic to remove one of them. Luckily, Yob automatically adapts the remaining items upon deletion to keep your intent in tact. Before it does so however, Yob will alert you if the item you're deleting is referenced in other expressions: Ok will proceed with the deletion and make any necessary adaptions, and Cancel will abort the deletion. To resolve dependencies with the items that reference the deleted item, Yob will adapt your data in several ways:","title":"Removing Items"},{"location":"references/expression_reference/#index-shifting-applies-to-all-items","text":"Since all items are numbered, removing an item can affect the numbering of other items. Here's an example of how Yob would resolve an applicable situation: Here, if we simply removed f2 , there would be a gap between f1 and f3 . To fix this, Yob simply shifts the indices of any functions after f2 (in this case, only f3 ) down by one. This causes f3 to now be f2 , but f1 's expression depended on f3 rather than f2 . Yob corrects this by modifying f1 's expression, as you can see in the image above.","title":"Index Shifting (Applies to All Items)"},{"location":"references/expression_reference/#function-substitution-functions-and-curve-fits-only","text":"When a Function or Curve Fit is removed, and another expression depends upon it directly, Yob will replace all references to it with the contents of its expression. In the example above, cf1 's expression happened to be 0.485*x + 3.071 .","title":"Function Substitution (Functions and Curve Fits Only)"},{"location":"references/expression_reference/#dependency-removal-calculated-columns-only","text":"When a Data Set is removed, and a Calculated Column expression references one of its columns, nothing can be done to sensibly retain the expression. Yob will disable the Calculated Column and clear its expression. This leaves the data untouched, but the values will no longer be calculated.","title":"Dependency Removal (Calculated Columns Only)"},{"location":"references/expression_reference/#the-independent-variable","text":"Functions and Curve Fits both make use of the independent variable. In most cases, this is simply known as x , which is the case for f1(x) = sin(x) and cf1(x) = A*x + B . However, some situations might warrant a more descriptive independent variable. Consider the example where you are plotting distance against time. In this scenario, it might make more sense for the independent variable to be t instead. This can be changed in the Labels menu: Note Changing this field will automatically update any affected expressions. For example, the cf1(x) = A*x + B example would become cf1(t) = A*t + B .","title":"The Independent Variable"},{"location":"references/expression_reference/#built-in-operators","text":"Yob expressions can contain any of these built-in operators: Operator Description + Addition - Subtraction * Multiplication / Division ^ Exponentiation","title":"Built-in Operators"},{"location":"references/expression_reference/#built-in-functions","text":"Yob expressions can contain any of these built-in functions: Name Description sqrt(x) Square root of x ln(x) Natural log (base e) of x log(x) Log (base 10) of x log10(x) Log (base 10) of x (for those who wish to be explicit) abs(x) Absolute value of x floor(x) Floor of x (round down) ceil(x) Ceiling of x (round up) round(x) x rounded to the nearest integer random(x) Random value between 0 and x sin(x) Sine of x (in radians) cos(x) Cosine of x (in radians) tan(x) Tangent of x (in radians) csc(x) Cosecant of x (in radians) sec(x) Secant of x (in radians) cot(x) Cotangent of x (in radians) asin(x) Inverse Sine (or Arcsine) of x (in radians) acos(x) Inverse Cosine (or Arccosine) of x (in radians) atan(x) Inverse Tangent (or Arctangent) of x (in radians) acsc(x) Inverse Cosecant (or Arccosecant) of x (in radians) asec(x) Inverse Secant (or Arcsecant) of x (in radians) acot(x) Inverse Cotangent (or Arccotangent) of x (in radians) sinh(x) Hyperbolic Sine of x cosh(x) Hyperbolic Cosine of x tanh(x) Hyperbolic Tangent of x csch(x) Hyperbolic Cosecant of x sech(x) Hyperbolic Secant of x coth(x) Hyperbolic Cotangent of x asinh(x) Inverse Hyperbolic Sine of x acosh(x) Inverse Hyperbolic Cosine of x atanh(x) Inverse Hyperbolic Tangent of x acsch(x) Inverse Hyperbolic Cosecant of x asech(x) Inverse Hyperbolic Secant of x acoth(x) Inverse Hyperbolic Cotangent of x","title":"Built-in Functions"},{"location":"references/expression_reference/#built-in-constants","text":"Yob expressions can contain any of these built-in constants: Name Numeric Value Accepted Formats E 2.71828182846 E, e Pi 3.14159265359 PI, pi, \u03c0 Tau 6.28318530718 TAU, tau, \u03c4 Phi 1.61803398874 PHI, phi, \u03c6, \u03d5","title":"Built-in Constants"},{"location":"references/storage_and_loading_reference/","text":"Storage and Loading Reference Yob utilizes your Google Drive account to store graph information so that it is able to load your graph back into the Yob whenever you want to edit it again. In this reference, we breakdown the process by which data is stored and loaded, and how to best manage your graph data. How Yob Uses Your Google Drive All of Yob's content is stored in the Yob folder, which contains the files Yob needs to store on your Google Drive and all of Yob's other folders. Yob stores its graph files (.yob files) in the graphs folder. Do Not Mix Yob's Files With Your Own It is advised that you do not attempt to store any of your personal files within Yob folders, as they will be at the mercy of Yob and could be potentially trashed. What is a Yob Graph? Yob recognizes a graph as an image on the current Google Doc with a shareable link to a valid Yob graph file in someone's Google Drive attached to it. Yob Graphs Are Shareable By Link In order to make sharing graphs as easy as possible, when a graph is saved to Google Drive, we allow anyone with the shareable link to view the graph content. However, if your Google account is managed by a domain (e.g., a school or work account), then only users within that domain can view the graph content. Let's go over a few examples of valid and invalid graphs. The image below is indeed a Yob graph. It is an image and it contains the shareable link to a valid Yob graph file. The next image obviously is not a Yob graph. It is an image of a kitten stuck in a tree and that is all. Surprisingly, this last image is considered a Yob graph. Since it is an image and it contains a shareable link to a valid Yob graph file, Yob will load the graph data from the link. Keep in mind, the content of the image matters not to Yob. What matters is that is that the image contains a valid link. So now that we know what a Yob graph is, lets see how the data is saved to your Google Drive account. How Data is Stored Whenever you click the 'Insert' button to insert a graph, Yob begins the data storage process. First, Yob calculates the size of the 'graphs' folder and then if the new chunk of graph data is small enough to fit within the allotted space set by the user, it gets stored into the 'graphs' folder. Then an image of the graph is stored into the document at the location of the cursor or replaces the selected content if there is a selection. A link to the newly saved graph file is then attached to the image. Yob Does Not Keep Track of Graphs Yob does not attempt to keep track of all of the graphs on a document that link back to any one specific graph file. So each graph file will stay in the graphs folder until it's reached the maximum storage capacity, then the oldest graph files will be trashed. Managing Your Data It was mentioned earlier that Yob checks how much space is currently being used by Yob whenever a graph is inserted. This is one step of Yob's larger process of storage management. As stated above, Yob checks to see if the graph being inserted can fit within the allotted storage space that you have given Yob. Once this allotted space has been filled, Yob will begin to trash the oldest graph files until enough room is made for the new graph. Trashed Graphs Can Still Be Loaded Although Yob puts the oldest graph files into the trash, they still exist on your drive and therefore Yob can technically still load them. It is only when the trash is emptied that any graphs with the specific graph file can no longer be loaded. By default, Yob will use up to 100 MB (About 0.1 GB) of your Google Drive storage. You can increase or shrink this value by adjusting the Yob settings. To access the Yob settings, select Add-ons > Yob > Open Settings . A dialog should pop up that looks like this: The Max storage capacity field is where you can adjust how much space on your Google Drive account that Yob is allowed to use. It is very unlikely that you will ever reach 100 MB of graph data. A graph with three functions, three data sets with moderate amounts of data, and three curve fits comes out to 3 KB. Assuming all graphs you make are this size, you would need to create 34134 graphs to reach 100 MB. The Warn me checkbox at the bottom is fairly self-descriptive. When it comes time to make space for a new graph, a dialog will pop up that looks like this: From this dialog you have three options. Ok - Yob will proceed to trash the oldest graph files until the new graph can be added. Open Settings - Yob will open the settings menu for you where you can adjust the Max storage capacity value if desired. Cancel - Yob will not trash any graph files and will not add the new graph.","title":"Storage and Loading Reference"},{"location":"references/storage_and_loading_reference/#storage-and-loading-reference","text":"Yob utilizes your Google Drive account to store graph information so that it is able to load your graph back into the Yob whenever you want to edit it again. In this reference, we breakdown the process by which data is stored and loaded, and how to best manage your graph data.","title":"Storage and Loading Reference"},{"location":"references/storage_and_loading_reference/#how-yob-uses-your-google-drive","text":"All of Yob's content is stored in the Yob folder, which contains the files Yob needs to store on your Google Drive and all of Yob's other folders. Yob stores its graph files (.yob files) in the graphs folder. Do Not Mix Yob's Files With Your Own It is advised that you do not attempt to store any of your personal files within Yob folders, as they will be at the mercy of Yob and could be potentially trashed.","title":"How Yob Uses Your Google Drive"},{"location":"references/storage_and_loading_reference/#what-is-a-yob-graph","text":"Yob recognizes a graph as an image on the current Google Doc with a shareable link to a valid Yob graph file in someone's Google Drive attached to it. Yob Graphs Are Shareable By Link In order to make sharing graphs as easy as possible, when a graph is saved to Google Drive, we allow anyone with the shareable link to view the graph content. However, if your Google account is managed by a domain (e.g., a school or work account), then only users within that domain can view the graph content. Let's go over a few examples of valid and invalid graphs. The image below is indeed a Yob graph. It is an image and it contains the shareable link to a valid Yob graph file. The next image obviously is not a Yob graph. It is an image of a kitten stuck in a tree and that is all. Surprisingly, this last image is considered a Yob graph. Since it is an image and it contains a shareable link to a valid Yob graph file, Yob will load the graph data from the link. Keep in mind, the content of the image matters not to Yob. What matters is that is that the image contains a valid link. So now that we know what a Yob graph is, lets see how the data is saved to your Google Drive account.","title":"What is a Yob Graph?"},{"location":"references/storage_and_loading_reference/#how-data-is-stored","text":"Whenever you click the 'Insert' button to insert a graph, Yob begins the data storage process. First, Yob calculates the size of the 'graphs' folder and then if the new chunk of graph data is small enough to fit within the allotted space set by the user, it gets stored into the 'graphs' folder. Then an image of the graph is stored into the document at the location of the cursor or replaces the selected content if there is a selection. A link to the newly saved graph file is then attached to the image. Yob Does Not Keep Track of Graphs Yob does not attempt to keep track of all of the graphs on a document that link back to any one specific graph file. So each graph file will stay in the graphs folder until it's reached the maximum storage capacity, then the oldest graph files will be trashed.","title":"How Data is Stored"},{"location":"references/storage_and_loading_reference/#managing-your-data","text":"It was mentioned earlier that Yob checks how much space is currently being used by Yob whenever a graph is inserted. This is one step of Yob's larger process of storage management. As stated above, Yob checks to see if the graph being inserted can fit within the allotted storage space that you have given Yob. Once this allotted space has been filled, Yob will begin to trash the oldest graph files until enough room is made for the new graph. Trashed Graphs Can Still Be Loaded Although Yob puts the oldest graph files into the trash, they still exist on your drive and therefore Yob can technically still load them. It is only when the trash is emptied that any graphs with the specific graph file can no longer be loaded. By default, Yob will use up to 100 MB (About 0.1 GB) of your Google Drive storage. You can increase or shrink this value by adjusting the Yob settings. To access the Yob settings, select Add-ons > Yob > Open Settings . A dialog should pop up that looks like this: The Max storage capacity field is where you can adjust how much space on your Google Drive account that Yob is allowed to use. It is very unlikely that you will ever reach 100 MB of graph data. A graph with three functions, three data sets with moderate amounts of data, and three curve fits comes out to 3 KB. Assuming all graphs you make are this size, you would need to create 34134 graphs to reach 100 MB. The Warn me checkbox at the bottom is fairly self-descriptive. When it comes time to make space for a new graph, a dialog will pop up that looks like this: From this dialog you have three options. Ok - Yob will proceed to trash the oldest graph files until the new graph can be added. Open Settings - Yob will open the settings menu for you where you can adjust the Max storage capacity value if desired. Cancel - Yob will not trash any graph files and will not add the new graph.","title":"Managing Your Data"},{"location":"references/styling_and_labeling_reference/","text":"Styling and Labeling Reference Whenever you make a graph, you want to make sure that the information is clearly labeled and presented in an appropriate style. In this reference, we will cover everything you need to know about styling and labeling your graphs. Graph Themes Graph themes are used to change the overall style of the graph, which can be accessed through the Styles menu. The currently built-in themes we have are shown below: Theme Name Preview Standard Minimal Dark Blueprint Styling Specific Items Data Sets, Functions, and Curve Fits can all be individually styled. You can modify the styles all at once in the Styles menu, or you can modify them individually in their respective menus. The following example shows the two locations that you could modify the style of Data Set 2: Graph Labels Explaining the labeling system is best done by example. Here we have a graph that makes use of labels effectively: These labels can be changed via the Labels menu. Below we break down how the Labels menu was used to create the graph: Explanation Screenshot Here is the Title field. The title appears at the very top of the graph, as shown above. Here you can adjust labels for the Independent Axis . Each axis has the option to either use a single master label (the first item in the section), or use the Data Set labels (the last items in the section). You can choose which option you want with the Use Data Set Labels checkbox. In our example, the checkbox was left unchecked , since we only wanted a single label on the Time axis. You might have noticed the Independent Variable field. This does not affect any of the labels on the graph, but it does affect expressions. Check out the Expression Reference to learn more. The Dependent Axis section works just like the Independent Axis section. For this section, we checked the checkbox since we wanted to distinguish between the two Data Sets.","title":"Styling and Labeling Reference"},{"location":"references/styling_and_labeling_reference/#styling-and-labeling-reference","text":"Whenever you make a graph, you want to make sure that the information is clearly labeled and presented in an appropriate style. In this reference, we will cover everything you need to know about styling and labeling your graphs.","title":"Styling and Labeling Reference"},{"location":"references/styling_and_labeling_reference/#graph-themes","text":"Graph themes are used to change the overall style of the graph, which can be accessed through the Styles menu. The currently built-in themes we have are shown below: Theme Name Preview Standard Minimal Dark Blueprint","title":"Graph Themes"},{"location":"references/styling_and_labeling_reference/#styling-specific-items","text":"Data Sets, Functions, and Curve Fits can all be individually styled. You can modify the styles all at once in the Styles menu, or you can modify them individually in their respective menus. The following example shows the two locations that you could modify the style of Data Set 2:","title":"Styling Specific Items"},{"location":"references/styling_and_labeling_reference/#graph-labels","text":"Explaining the labeling system is best done by example. Here we have a graph that makes use of labels effectively: These labels can be changed via the Labels menu. Below we break down how the Labels menu was used to create the graph: Explanation Screenshot Here is the Title field. The title appears at the very top of the graph, as shown above. Here you can adjust labels for the Independent Axis . Each axis has the option to either use a single master label (the first item in the section), or use the Data Set labels (the last items in the section). You can choose which option you want with the Use Data Set Labels checkbox. In our example, the checkbox was left unchecked , since we only wanted a single label on the Time axis. You might have noticed the Independent Variable field. This does not affect any of the labels on the graph, but it does affect expressions. Check out the Expression Reference to learn more. The Dependent Axis section works just like the Independent Axis section. For this section, we checked the checkbox since we wanted to distinguish between the two Data Sets.","title":"Graph Labels"},{"location":"tutorials/advanced_curve_fits/","text":"Advanced Curve Fits In this tutorial, we will cover some of the more advanced features of Yob's Curve Fitting. Our example will determine the apex of a football's trajectory using sparse data. If you haven\u2019t done so already, you may want to check out the Getting Started tutorial before you continue. The Data Time (s) Height (m) 0.0 1.885 0.5 16.435 1.0 22.49 1.5 24.092 2.0 22.289 2.5 19.084 3.0 5.375 Copy this data into a new Data Set and set the appropriate labels. If you don't know how do this, you may want to take a look at our Getting Started tutorial to learn how. If all goes well, you should have something like this: Fitting a Curve Now, let's go ahead create a new Curve Fit from the Curve Fit menu. First, we will select the Data Set we just created from the Data Source selector since this is the data we want to fit. Then, within the Model submenu, we want select quadratic for the type, which has the form A*x^2 + B*x + C . After doing this, you should see that a curve has been fit to the data: If you scroll down to the Parameter Output section, you should see the estimated values for A, B, and C. In this model, A represents the vertical acceleration of the football (i.e. acceleration of gravity), B represents the inital velocity of the football, and C represents the inital height. Using a Custom Model Since we were trying to find the apex of the football's trajectory, the variables from the default quadratic model don't really help us. To better represent this problem, we need a different version of the quadratic model. The vertex form, or A*(x - H)^2 + K is what we are looking for. Yob doesn't support this model by default, but we can create a custom model to represent the vertex form. First, select Custom for the model type, then enter A*(x - H)^2 + K into the expression field like so: Now the value of H should represent the time that the football reaches the apex of its trajectory, while K represents the height of the apex. Guess Parameters It is possible that the Curve Fit didn't quite fit the data as expected, as the following graph illustrates: Without going into too much detail, custom models generally need good inital parameter guesses to fit data well. You can set better guesses by checking the Manual Guess check box within the Guess Parameters section, then changing the parameter values below. For this data, we recommend setting A to -9.8, H to 1.5, and K to 25. (You might not even need to finish entering the guesses before the curve snaps into place.) To learn more about guess parameters, check out the section on it here in the Curve Fit Reference . Alternative Fitting Methods Up until this point, we've largely ignored the Method selector in the Curve Fit menu. For most data sets you will encounter, the default OLS, or Ordinary Least Squares method will work just fine. However, there are some situations where an alternative method would be preferred. Consider the following data for example: This is a good example of data that is better fit by WLS, or Weighted Least Squares . WLS makes the assumption that error increases with the dependent variable, where as OLS assumes that overall error remains constant. Recognizing when to use alternative methods like this can make a big difference. For more information on the different fitting methods, check out the Curve Fit Reference - Regression Methods .","title":"Advanced Curve Fits"},{"location":"tutorials/advanced_curve_fits/#advanced-curve-fits","text":"In this tutorial, we will cover some of the more advanced features of Yob's Curve Fitting. Our example will determine the apex of a football's trajectory using sparse data. If you haven\u2019t done so already, you may want to check out the Getting Started tutorial before you continue.","title":"Advanced Curve Fits"},{"location":"tutorials/advanced_curve_fits/#the-data","text":"Time (s) Height (m) 0.0 1.885 0.5 16.435 1.0 22.49 1.5 24.092 2.0 22.289 2.5 19.084 3.0 5.375 Copy this data into a new Data Set and set the appropriate labels. If you don't know how do this, you may want to take a look at our Getting Started tutorial to learn how. If all goes well, you should have something like this:","title":"The Data"},{"location":"tutorials/advanced_curve_fits/#fitting-a-curve","text":"Now, let's go ahead create a new Curve Fit from the Curve Fit menu. First, we will select the Data Set we just created from the Data Source selector since this is the data we want to fit. Then, within the Model submenu, we want select quadratic for the type, which has the form A*x^2 + B*x + C . After doing this, you should see that a curve has been fit to the data: If you scroll down to the Parameter Output section, you should see the estimated values for A, B, and C. In this model, A represents the vertical acceleration of the football (i.e. acceleration of gravity), B represents the inital velocity of the football, and C represents the inital height.","title":"Fitting a Curve"},{"location":"tutorials/advanced_curve_fits/#using-a-custom-model","text":"Since we were trying to find the apex of the football's trajectory, the variables from the default quadratic model don't really help us. To better represent this problem, we need a different version of the quadratic model. The vertex form, or A*(x - H)^2 + K is what we are looking for. Yob doesn't support this model by default, but we can create a custom model to represent the vertex form. First, select Custom for the model type, then enter A*(x - H)^2 + K into the expression field like so: Now the value of H should represent the time that the football reaches the apex of its trajectory, while K represents the height of the apex. Guess Parameters It is possible that the Curve Fit didn't quite fit the data as expected, as the following graph illustrates: Without going into too much detail, custom models generally need good inital parameter guesses to fit data well. You can set better guesses by checking the Manual Guess check box within the Guess Parameters section, then changing the parameter values below. For this data, we recommend setting A to -9.8, H to 1.5, and K to 25. (You might not even need to finish entering the guesses before the curve snaps into place.) To learn more about guess parameters, check out the section on it here in the Curve Fit Reference .","title":"Using a Custom Model"},{"location":"tutorials/advanced_curve_fits/#alternative-fitting-methods","text":"Up until this point, we've largely ignored the Method selector in the Curve Fit menu. For most data sets you will encounter, the default OLS, or Ordinary Least Squares method will work just fine. However, there are some situations where an alternative method would be preferred. Consider the following data for example: This is a good example of data that is better fit by WLS, or Weighted Least Squares . WLS makes the assumption that error increases with the dependent variable, where as OLS assumes that overall error remains constant. Recognizing when to use alternative methods like this can make a big difference. For more information on the different fitting methods, check out the Curve Fit Reference - Regression Methods .","title":"Alternative Fitting Methods"},{"location":"tutorials/advanced_data_sets/","text":"Advanced Data Sets In this tutorial, we will demonstrate how to take full advantage of Data Sets to maximize efficiency in a more complicated experiment. For this experiment, we will be plotting the 2D coordinates of a ball rolling down a bumpy hill and generating other data from the coordinate information. If you haven\u2019t done so already, you may want to check out the Getting Started tutorial before you continue. The Data Time (s) 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 X (m) 0.00 0.03 0.10 0.22 0.40 0.62 0.90 1.22 1.60 2.02 2.50 3.02 3.60 Y (m) 0.00 0.47 0.84 0.99 0.90 0.59 0.14 -0.35 -0.75 -0.97 -0.95 -0.70 -0.27 Above, we have collected the X and Y coordinates of a ball as it rolls down a bumpy surface over time. Let\u2019s start with making a Data Set to plot how X changes with Time . To do this, create a new Data Set, then simply copy the Time and X rows and paste them into their respective columns in the table editor. Note Yob will automatically detect when you have copied a row and will rotate your data to fill the column you're trying to paste to. After you paste the data, you can throw on some labels like so: Sharing Columns Now suppose that we want to overlay a second Data Set comparing Y with Time. You may be thinking that we just need to create a new Data Set and copy over the Y and Time data, and you wouldn't be wrong, but there are a few issues with that approach. Allow us to show you a slightly different way, and then we'll explain why it's beneficial. First, create a new Data Set and copy just the Y values into the second column. We're going to leave the first column empty for now. Label the columns similarly to the first Data Set like so: Next, click the calculator icon in the top right of the first column. You will be presented with the following dialog: Every column can be configured to calculate its values from the values of other columns. (See the Calculated Column Reference for more details.) In this case, we want the column to simply mirror the values from Time column of the first Data Set. To do this, select Data Set 1 - Time (d1c1) from the dropdown menu and click Insert . Every column has a reference name , so when you see d2c1 = d1c1 , that means that the values from column 1 of Data Set 2 should equal the values from column 1 of Data Set 1. You can use the dropdown menu to find the name of the column you're looking for. Check the Enabled check box to make the calculations take effect. Now all of the Time values should have automatically filled the column: Note Calculated columns cannot be edited since they are generated from other columns. They are turned yellow to remind you of this: Benefits You may be wondering why we took this round-about way of getting the time values into a second column. What's wrong with copying and pasting? Well, in this experiment it wouldn't have been so bad to simply copy and paste, but imagine an experiement where you were plotting ten different dependent variables against the same independent variable. Not only would you have to copy and paste the same data ten times, but if you ever discovered a mistake, you would have to correct it in ten different places . When you are using Calculated Columns, changes to the source column will propagate out to all the columns that depend on it, saving you time and errors. Generating Columns If all has gone well thus far, your graph should look something like this: Now suppose that we want to overlay a third Data Set showing the total distance between the ball and the origin. We can calculate the values easily using the Euclidean distance forumla, , but crunching all of the numbers by hand is tedious. This would be another great place to make use of Calculated Columns. Let's start by making another Data Set and using the same technique we used above to copy the Time data into the first column: First, create a new Data Set, then click the calculator icon in the top right of the first column. Select Data Set 1 - Time (d1c1) from the dropdown menu, click Insert , then check the Enabled check box: Before we continue, let's put some labels on this Data Set like so: Now let's go ahead and fill our distance column. If we were doing this by hand, we'd have to manually put each value from the X and Y columns through the formula to get the values for distance. With Calculated Columns, we can simply plug in this formula, and all the values will be calculated automatically: Click on the calculator icon in the top right of the distance column, and enter sqrt((d1c2)^2 + (d2c2)^2) into the expression field. This expression is saying that we want each value of the column to be the square root of the cooresponding X value (Data Set 1, Column 2) squared, and the cooresponding Y value (Data Set2, Column 2) squared. Tip If you are struggling to get column names right, you can always use the drop down menu to locate and insert the names that you looking for. Lastly, check the Enabled check box. If you have done everything correctly, your graph should look like the following: Learn More If you would like to learn more about Calculated Columns and expressions, check out these references: Calculated Column Reference Expression Reference","title":"Advanced Data Sets"},{"location":"tutorials/advanced_data_sets/#advanced-data-sets","text":"In this tutorial, we will demonstrate how to take full advantage of Data Sets to maximize efficiency in a more complicated experiment. For this experiment, we will be plotting the 2D coordinates of a ball rolling down a bumpy hill and generating other data from the coordinate information. If you haven\u2019t done so already, you may want to check out the Getting Started tutorial before you continue.","title":"Advanced Data Sets"},{"location":"tutorials/advanced_data_sets/#the-data","text":"Time (s) 0.0 0.5 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5 6.0 X (m) 0.00 0.03 0.10 0.22 0.40 0.62 0.90 1.22 1.60 2.02 2.50 3.02 3.60 Y (m) 0.00 0.47 0.84 0.99 0.90 0.59 0.14 -0.35 -0.75 -0.97 -0.95 -0.70 -0.27 Above, we have collected the X and Y coordinates of a ball as it rolls down a bumpy surface over time. Let\u2019s start with making a Data Set to plot how X changes with Time . To do this, create a new Data Set, then simply copy the Time and X rows and paste them into their respective columns in the table editor. Note Yob will automatically detect when you have copied a row and will rotate your data to fill the column you're trying to paste to. After you paste the data, you can throw on some labels like so:","title":"The Data"},{"location":"tutorials/advanced_data_sets/#sharing-columns","text":"Now suppose that we want to overlay a second Data Set comparing Y with Time. You may be thinking that we just need to create a new Data Set and copy over the Y and Time data, and you wouldn't be wrong, but there are a few issues with that approach. Allow us to show you a slightly different way, and then we'll explain why it's beneficial. First, create a new Data Set and copy just the Y values into the second column. We're going to leave the first column empty for now. Label the columns similarly to the first Data Set like so: Next, click the calculator icon in the top right of the first column. You will be presented with the following dialog: Every column can be configured to calculate its values from the values of other columns. (See the Calculated Column Reference for more details.) In this case, we want the column to simply mirror the values from Time column of the first Data Set. To do this, select Data Set 1 - Time (d1c1) from the dropdown menu and click Insert . Every column has a reference name , so when you see d2c1 = d1c1 , that means that the values from column 1 of Data Set 2 should equal the values from column 1 of Data Set 1. You can use the dropdown menu to find the name of the column you're looking for. Check the Enabled check box to make the calculations take effect. Now all of the Time values should have automatically filled the column: Note Calculated columns cannot be edited since they are generated from other columns. They are turned yellow to remind you of this:","title":"Sharing Columns"},{"location":"tutorials/advanced_data_sets/#benefits","text":"You may be wondering why we took this round-about way of getting the time values into a second column. What's wrong with copying and pasting? Well, in this experiment it wouldn't have been so bad to simply copy and paste, but imagine an experiement where you were plotting ten different dependent variables against the same independent variable. Not only would you have to copy and paste the same data ten times, but if you ever discovered a mistake, you would have to correct it in ten different places . When you are using Calculated Columns, changes to the source column will propagate out to all the columns that depend on it, saving you time and errors.","title":"Benefits"},{"location":"tutorials/advanced_data_sets/#generating-columns","text":"If all has gone well thus far, your graph should look something like this: Now suppose that we want to overlay a third Data Set showing the total distance between the ball and the origin. We can calculate the values easily using the Euclidean distance forumla, , but crunching all of the numbers by hand is tedious. This would be another great place to make use of Calculated Columns. Let's start by making another Data Set and using the same technique we used above to copy the Time data into the first column: First, create a new Data Set, then click the calculator icon in the top right of the first column. Select Data Set 1 - Time (d1c1) from the dropdown menu, click Insert , then check the Enabled check box: Before we continue, let's put some labels on this Data Set like so: Now let's go ahead and fill our distance column. If we were doing this by hand, we'd have to manually put each value from the X and Y columns through the formula to get the values for distance. With Calculated Columns, we can simply plug in this formula, and all the values will be calculated automatically: Click on the calculator icon in the top right of the distance column, and enter sqrt((d1c2)^2 + (d2c2)^2) into the expression field. This expression is saying that we want each value of the column to be the square root of the cooresponding X value (Data Set 1, Column 2) squared, and the cooresponding Y value (Data Set2, Column 2) squared. Tip If you are struggling to get column names right, you can always use the drop down menu to locate and insert the names that you looking for. Lastly, check the Enabled check box. If you have done everything correctly, your graph should look like the following:","title":"Generating Columns"},{"location":"tutorials/advanced_data_sets/#learn-more","text":"If you would like to learn more about Calculated Columns and expressions, check out these references: Calculated Column Reference Expression Reference","title":"Learn More"},{"location":"tutorials/getting_started/","text":"Getting Started For this tutorial, we will demonstrate the basics of Yob by plotting the time and distance traveled of a ball rolling across the floor and determining its projected distance traveled as time goes on. Installation First thing\u2019s first. If you don\u2019t have Yob installed already, visit our Google Doc add-on store page . To start Yob, open a Google Doc and select Add-ons > Yob > Open Editor . The Home Screen When you open the graph editor, you should see something like this: The home screen is organized into two sections: the graph preview, and the main menu. The graph preview can be moved by clicking and dragging, and zoomed by scrolling the mouse wheel. The main menu contains several submenus for managing specific parts of your graph. Let\u2019s start with the Data Set menu. Plotting Data Click \u201cData Sets\u201d from the main menu, then click the + icon to create a new Data Set. Locate the table editor at the bottom of the menu. Here, we can enter the time-distance data from our ball experiment. Here is some sample data that we have supplied for you (you may simply copy and paste this data): Time (s) Distance (m) 1.0 1.5 1.5 1.8 2.0 2.3 2.5 2.6 3.0 3.5 3.5 3.7 4.0 4.2 4.5 4.9 5.0 5.3 Once entered into the table, the data can be viewed in the graph preview. To automatically fit the window to show all of the data, select the Auto Zoom checkbox. Next, let\u2019s put proper labels on our Data Set. We will set the xLabel field to Time and the xUnit field to s for seconds, then the yLabel field to Distance and the yUnit field to m for meters. Your graph should now look something like the following: Finding the Projected Distance Now that we have plotted the data, we can find the projected distance of the ball as time goes on. To accomplish this, we want to create a Curve Fit, which will calculate the line of best fit, given a Data Set and a model. Click \u201cBack\u201d to return to the main menu. Then click the Curve Fits submenu, and click the + icon to create a new Curve Fit. Set the data source of the new Curve Fit to the Data Set we previously created: Data Set 1. Then change the model type from none to linear. Voil\u00e0! You should now see the line of best fit for this data on the graph. Adding the Finishing Touches To introduce a little more color on this graph, let\u2019s change the style of the Curve Fit line. To accomplish this, click on the line preview icon near the top of the menu. You will be presented with several styling options. Let\u2019s change the color blue and make the line dashed, like so: And what\u2019s a graph without a title? A title can be added to the graph back in the Labels submenu. At the top of the menu, enter \u201cDistance vs Time\u201d in the Title field. When you're done, you should have something like this: Inserting the Graph Now that our graph is complete, we can send it to the document. To do this, simply click \u201cInsert\u201d at the top of Yob, then select the size of the graph you want to insert. After the graph is added, you may notice that it has a link attached to it. Do not remove this link. This link is how Yob knows where the graph data is stored on your Google Drive account, so that you may edit the graph later if you wish. If you would like to learn more about how Yob stores graph data, view the data storage reference where we explain this in greater detail. Check Out the Other Tutorials Yob is full of great features that are covered throughout our tutorial series. Click the \u201cNext\u201d button above to move on to the next tutorial.","title":"Getting Started"},{"location":"tutorials/getting_started/#getting-started","text":"For this tutorial, we will demonstrate the basics of Yob by plotting the time and distance traveled of a ball rolling across the floor and determining its projected distance traveled as time goes on.","title":"Getting Started"},{"location":"tutorials/getting_started/#installation","text":"First thing\u2019s first. If you don\u2019t have Yob installed already, visit our Google Doc add-on store page . To start Yob, open a Google Doc and select Add-ons > Yob > Open Editor .","title":"Installation"},{"location":"tutorials/getting_started/#the-home-screen","text":"When you open the graph editor, you should see something like this: The home screen is organized into two sections: the graph preview, and the main menu. The graph preview can be moved by clicking and dragging, and zoomed by scrolling the mouse wheel. The main menu contains several submenus for managing specific parts of your graph. Let\u2019s start with the Data Set menu.","title":"The Home Screen"},{"location":"tutorials/getting_started/#plotting-data","text":"Click \u201cData Sets\u201d from the main menu, then click the + icon to create a new Data Set. Locate the table editor at the bottom of the menu. Here, we can enter the time-distance data from our ball experiment. Here is some sample data that we have supplied for you (you may simply copy and paste this data): Time (s) Distance (m) 1.0 1.5 1.5 1.8 2.0 2.3 2.5 2.6 3.0 3.5 3.5 3.7 4.0 4.2 4.5 4.9 5.0 5.3 Once entered into the table, the data can be viewed in the graph preview. To automatically fit the window to show all of the data, select the Auto Zoom checkbox. Next, let\u2019s put proper labels on our Data Set. We will set the xLabel field to Time and the xUnit field to s for seconds, then the yLabel field to Distance and the yUnit field to m for meters. Your graph should now look something like the following:","title":"Plotting Data"},{"location":"tutorials/getting_started/#finding-the-projected-distance","text":"Now that we have plotted the data, we can find the projected distance of the ball as time goes on. To accomplish this, we want to create a Curve Fit, which will calculate the line of best fit, given a Data Set and a model. Click \u201cBack\u201d to return to the main menu. Then click the Curve Fits submenu, and click the + icon to create a new Curve Fit. Set the data source of the new Curve Fit to the Data Set we previously created: Data Set 1. Then change the model type from none to linear. Voil\u00e0! You should now see the line of best fit for this data on the graph.","title":"Finding the Projected Distance"},{"location":"tutorials/getting_started/#adding-the-finishing-touches","text":"To introduce a little more color on this graph, let\u2019s change the style of the Curve Fit line. To accomplish this, click on the line preview icon near the top of the menu. You will be presented with several styling options. Let\u2019s change the color blue and make the line dashed, like so: And what\u2019s a graph without a title? A title can be added to the graph back in the Labels submenu. At the top of the menu, enter \u201cDistance vs Time\u201d in the Title field. When you're done, you should have something like this:","title":"Adding the Finishing Touches"},{"location":"tutorials/getting_started/#inserting-the-graph","text":"Now that our graph is complete, we can send it to the document. To do this, simply click \u201cInsert\u201d at the top of Yob, then select the size of the graph you want to insert. After the graph is added, you may notice that it has a link attached to it. Do not remove this link. This link is how Yob knows where the graph data is stored on your Google Drive account, so that you may edit the graph later if you wish. If you would like to learn more about how Yob stores graph data, view the data storage reference where we explain this in greater detail.","title":"Inserting the Graph"},{"location":"tutorials/getting_started/#check-out-the-other-tutorials","text":"Yob is full of great features that are covered throughout our tutorial series. Click the \u201cNext\u201d button above to move on to the next tutorial.","title":"Check Out the Other Tutorials"}]}