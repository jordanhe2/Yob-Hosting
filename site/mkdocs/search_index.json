{
    "docs": [
        {
            "location": "/",
            "text": "Yob User Manual\n\n\n\n\nOverview\n\n\nYob is a \nfast\n and \nsimple\n graphing tool that's geared towards performing graphical analysis within Google Docs.\n\n\nSimple but powerful\n\n\nMaking graphs in Yob is quick and easy, making it a great choice for users who just want to plot some data and stick the graph in a document.  However, Yob also comes with many advanced features such as \ncalculated columns\n and \nnon-linear curve fitting\n, making it a useful tool for more advanced users.\n\n\nConvenient\n\n\nYob runs entirely within a Google Doc, so you never have to worry about transferring graphs between your computer and the document.  In fact, Yob \nblurs the lines\n between graph files and your document entirely.\n\n\n\n\nGetting Started\n\n\nFollow \nthis tutorial\n to familiarize yourself with the basics of Yob.  More advanced users can check out \nthe reference\n to learn more.\n\n\nKeep in mind we are still building the documentation for Yob, so if you click on a link and find an empty or incomplete page, we apologize.\n\n\nThank you for using Yob!",
            "title": "Home"
        },
        {
            "location": "/#yob-user-manual",
            "text": "",
            "title": "Yob User Manual"
        },
        {
            "location": "/#overview",
            "text": "Yob is a  fast  and  simple  graphing tool that's geared towards performing graphical analysis within Google Docs.",
            "title": "Overview"
        },
        {
            "location": "/#simple-but-powerful",
            "text": "Making graphs in Yob is quick and easy, making it a great choice for users who just want to plot some data and stick the graph in a document.  However, Yob also comes with many advanced features such as  calculated columns  and  non-linear curve fitting , making it a useful tool for more advanced users.",
            "title": "Simple but powerful"
        },
        {
            "location": "/#convenient",
            "text": "Yob runs entirely within a Google Doc, so you never have to worry about transferring graphs between your computer and the document.  In fact, Yob  blurs the lines  between graph files and your document entirely.",
            "title": "Convenient"
        },
        {
            "location": "/#getting-started",
            "text": "Follow  this tutorial  to familiarize yourself with the basics of Yob.  More advanced users can check out  the reference  to learn more.  Keep in mind we are still building the documentation for Yob, so if you click on a link and find an empty or incomplete page, we apologize.  Thank you for using Yob!",
            "title": "Getting Started"
        },
        {
            "location": "/tutorials/getting_started/",
            "text": "Getting Started\n\n\nFor this tutorial, we will demonstrate the basics of Yob by plotting the time and distance traveled of a ball rolling across the floor and determining its projected distance traveled as time goes on.\n\n\n\n\nInstallation\n\n\nFirst thing\u2019s first.  If you don\u2019t have Yob installed already, visit our \nGoogle Doc add-on store page\n and click \u201cInstall.\u201d\n\n\nTo start Yob, open a Google Doc and select \nAdd-ons\n > \nYob\n > \nOpen Editor\n.\n\n\n\n\n\n\n\nThe Home Screen\n\n\nWhen you open the graph editor, you should see something like this:\n\n\n\n\n\nThe home screen is organized into two sections:  the graph preview, and the main menu. The graph preview can be moved by clicking and dragging, and zoomed by scrolling the mouse wheel. The main menu contains several submenus for managing specific parts of your graph.  Let\u2019s start with the Data Set menu.\n\n\nPlotting Data\n\n\nClick \u201cData Sets\u201d from the main menu, then click the + icon to create a new Data Set. Locate the table editor at the bottom of the menu.  Here, we can enter the time-distance data from our ball experiment. Here is some sample data that we have supplied for you (you may simply copy and paste this data):\n\n\n\n    \n\n    \n\n        \nTime (s)\n\n        \nDistance (cm)\n\n    \n\n    \n\n    \n\n        \n1\n\n        \n2\n\n    \n\n    \n\n        \n3\n\n        \n3.2\n\n    \n\n    \n\n        \n5\n\n        \n2.9\n\n    \n\n    \n\n        \n7\n\n        \n4.4\n\n    \n\n\n\n\n\nOnce entered into the table, the data can be viewed in the graph preview.\n\n\nNext, let\u2019s put proper labels on our Data Set.  We will set the xLabel field to \nTime\n and the xUnit field to \ns\n for seconds, then the yLabel field to \nDistance\n and the yUnit field to \ncm\n for centimeters.\n\n\nYour graph should now look something like the following:\n\n\n\n\n\nFinding the Projected Distance\n\n\nNow that we have plotted the data, we can find the projected distance of the ball as time goes on. To accomplish this, we want to create a Curve Fit, which will calculate the line of best fit, given a Data Set and a model.\n\n\nClick \u201cBack\u201d to return to the main menu.  Then click the Curve Fits submenu, and click the + icon to create a new Curve Fit.\n\n\nSet the data source of the new Curve Fit to the Data Set we previously created:  Data Set 1. Then change the model type from none to linear. Viola! You should now see the line of best fit for this data on the graph.\n\n\n\n\n\nAdding the Finishing Touches\n\n\nTo introduce a little more color on this graph, let\u2019s change the style of the Curve Fit line.  To accomplish this, click on the line preview icon near the top of the menu.  You will be presented with several styling options.  Let\u2019s change the color blue and make the line dashed, like so:\n\n\n\n\n\nAnd what\u2019s a graph without a title?  A title can be added to the graph back in the Labels submenu.  At the top of the menu, enter \u201cDistance vs Time\u201d in the Title field.\n\n\nInserting the Graph\n\n\nNow that our graph is complete, we can send it to the document. To do this, simply click \u201cInsert\u201d at the top of Yob, then select the size of the graph you want to insert. After the graph is added, you may notice that it has a link attached to it. \nDo not remove this link.\n This link is how Yob knows where the graph data is stored on your Google Drive account, so that you may edit the graph later if you wish.\n\n\nIf you would like to learn more about how Yob stores graph data, view \nthe data storage reference\n where we explain this in greater detail.\n\n\nCheck Out the Other Tutorials\n\n\nYob is full of great features that are covered throughout our tutorial series. Click the \u201cNext\u201d button above to move on to the next tutorial.",
            "title": "Getting Started"
        },
        {
            "location": "/tutorials/getting_started/#getting-started",
            "text": "For this tutorial, we will demonstrate the basics of Yob by plotting the time and distance traveled of a ball rolling across the floor and determining its projected distance traveled as time goes on.",
            "title": "Getting Started"
        },
        {
            "location": "/tutorials/getting_started/#installation",
            "text": "First thing\u2019s first.  If you don\u2019t have Yob installed already, visit our  Google Doc add-on store page  and click \u201cInstall.\u201d  To start Yob, open a Google Doc and select  Add-ons  >  Yob  >  Open Editor .",
            "title": "Installation"
        },
        {
            "location": "/tutorials/getting_started/#the-home-screen",
            "text": "When you open the graph editor, you should see something like this:   The home screen is organized into two sections:  the graph preview, and the main menu. The graph preview can be moved by clicking and dragging, and zoomed by scrolling the mouse wheel. The main menu contains several submenus for managing specific parts of your graph.  Let\u2019s start with the Data Set menu.",
            "title": "The Home Screen"
        },
        {
            "location": "/tutorials/getting_started/#plotting-data",
            "text": "Click \u201cData Sets\u201d from the main menu, then click the + icon to create a new Data Set. Locate the table editor at the bottom of the menu.  Here, we can enter the time-distance data from our ball experiment. Here is some sample data that we have supplied for you (you may simply copy and paste this data):  \n     \n     \n         Time (s) \n         Distance (cm) \n     \n     \n     \n         1 \n         2 \n     \n     \n         3 \n         3.2 \n     \n     \n         5 \n         2.9 \n     \n     \n         7 \n         4.4 \n       Once entered into the table, the data can be viewed in the graph preview.  Next, let\u2019s put proper labels on our Data Set.  We will set the xLabel field to  Time  and the xUnit field to  s  for seconds, then the yLabel field to  Distance  and the yUnit field to  cm  for centimeters.  Your graph should now look something like the following:",
            "title": "Plotting Data"
        },
        {
            "location": "/tutorials/getting_started/#finding-the-projected-distance",
            "text": "Now that we have plotted the data, we can find the projected distance of the ball as time goes on. To accomplish this, we want to create a Curve Fit, which will calculate the line of best fit, given a Data Set and a model.  Click \u201cBack\u201d to return to the main menu.  Then click the Curve Fits submenu, and click the + icon to create a new Curve Fit.  Set the data source of the new Curve Fit to the Data Set we previously created:  Data Set 1. Then change the model type from none to linear. Viola! You should now see the line of best fit for this data on the graph.",
            "title": "Finding the Projected Distance"
        },
        {
            "location": "/tutorials/getting_started/#adding-the-finishing-touches",
            "text": "To introduce a little more color on this graph, let\u2019s change the style of the Curve Fit line.  To accomplish this, click on the line preview icon near the top of the menu.  You will be presented with several styling options.  Let\u2019s change the color blue and make the line dashed, like so:   And what\u2019s a graph without a title?  A title can be added to the graph back in the Labels submenu.  At the top of the menu, enter \u201cDistance vs Time\u201d in the Title field.",
            "title": "Adding the Finishing Touches"
        },
        {
            "location": "/tutorials/getting_started/#inserting-the-graph",
            "text": "Now that our graph is complete, we can send it to the document. To do this, simply click \u201cInsert\u201d at the top of Yob, then select the size of the graph you want to insert. After the graph is added, you may notice that it has a link attached to it.  Do not remove this link.  This link is how Yob knows where the graph data is stored on your Google Drive account, so that you may edit the graph later if you wish.  If you would like to learn more about how Yob stores graph data, view  the data storage reference  where we explain this in greater detail.",
            "title": "Inserting the Graph"
        },
        {
            "location": "/tutorials/getting_started/#check-out-the-other-tutorials",
            "text": "Yob is full of great features that are covered throughout our tutorial series. Click the \u201cNext\u201d button above to move on to the next tutorial.",
            "title": "Check Out the Other Tutorials"
        },
        {
            "location": "/tutorials/getting_familiar/",
            "text": "Getting Familiar",
            "title": "Getting Familar"
        },
        {
            "location": "/tutorials/getting_familiar/#getting-familiar",
            "text": "",
            "title": "Getting Familiar"
        },
        {
            "location": "/tutorials/advanced_data_sets/",
            "text": "Advanced Data Sets",
            "title": "Advanced Data Sets"
        },
        {
            "location": "/tutorials/advanced_data_sets/#advanced-data-sets",
            "text": "",
            "title": "Advanced Data Sets"
        },
        {
            "location": "/tutorials/advanced_curve_fits/",
            "text": "Advanced Curve Fits",
            "title": "Advanced Curve Fits"
        },
        {
            "location": "/tutorials/advanced_curve_fits/#advanced-curve-fits",
            "text": "",
            "title": "Advanced Curve Fits"
        },
        {
            "location": "/tutorials/labeling_and_sizing_your_graph/",
            "text": "Labeling and Sizing Your Graph",
            "title": "Labeling and Sizing Your Graph"
        },
        {
            "location": "/tutorials/labeling_and_sizing_your_graph/#labeling-and-sizing-your-graph",
            "text": "",
            "title": "Labeling and Sizing Your Graph"
        },
        {
            "location": "/tutorials/styling_your_graph/",
            "text": "Styling Your Graph",
            "title": "Styling Your Graph"
        },
        {
            "location": "/tutorials/styling_your_graph/#styling-your-graph",
            "text": "",
            "title": "Styling Your Graph"
        },
        {
            "location": "/references/data_storage/",
            "text": "Data Storage",
            "title": "Data Storage"
        },
        {
            "location": "/references/data_storage/#data-storage",
            "text": "",
            "title": "Data Storage"
        },
        {
            "location": "/references/expression_reference/",
            "text": "Expression Reference\n\n\nExpressions are used extensively throughout Yob.  Calculated Columns, Functions, and custom Curve Fits all make use of user-defined expressions.  This page is meant to serve as a reference for using expressions throughout the program.  If you are new to using expressions, you may want to check out one of the following tutorials first:\n\n\n\n\nAdvanced Curve Fits\n\n\nAdvanced Data Sets\n\n\n\n\n\n\nGeneral Rules\n\n\n\n\nAll expressions should follow the general syntax of mathematics.  Order of operations applies.\n\n\nAll operators need to be explicit.  For example, you cannot write \n2x\n; you would have to write \n2*x\n instead.\n\n\n\n\n\n\nReferencing Other Expressions\n\n\nA part of what makes expressions so effective is their ability to refer to other expressions.\n\n\nFunctions\n\n\nTo refer to a function within an expression, type the following:\n\n\nfx\n\n\n\nWhere \nx\n is the number of the Function (e.g. Function 1 = f1).\n\n\nThen wrap the input of the Function with (). The input can be any value or expression that is dependent on the independent variable.\n\n\nf3(x-5)\n\n\n\nColumns\n\n\nTo refer to a Column within an expression, type the following:\n\n\ndxcy\n\n\n\nWhere \nx\n is the number of the Data Set that the Column belongs to, and \ny\n is the number of the Column to be used (e.g. Data Set 2 Column 2 = d2c2).\n\n\nCurve Fits\n\n\nTo refer to a Curve Fit within an expression, type the following:\n\n\ncfx\n\n\n\nWhere \nx\n is the number of the Curve Fit. (e.g. Curve Fit 3 = cf3)\n\n\nThen wrap the input of the curve fit with () just like with Functions.\n\n\ncf5(x+1)\n\n\n\n\n\nBuilt-in Functions\n\n\nYob expressions can contain any of these built-in functions:\n\n\n\n    \nName\nDescription\n\n    \n\n        \nsqrt(x)\nSquare root of x\n\n        \nln(x)\nNatural log (base e) of x\n\n        \nlog(x)\nLog (base 10) of x\n\n        \nlog10(x)\nLog (base 10) of x (for those who wish to be explicit)\n\n        \nexp(x)\nBase e raised to the x power\n\n        \nabs(x)\nAbsolute value of x\n\n        \nfloor(x)\nFloor of x (round down)\n\n        \nceil(x)\nCeiling of x (round up)\n\n        \nround(x)\nx rounded to the nearest integer\n\n        \nsin(x)\nSine of x (in radians)\n\n        \ncos(x)\nCosine of x (in radians)\n\n        \ntan(x)\nTangent of x (in radians)\n\n        \ncsc(x)\nCosecant of x (in radians)\n\n        \nsec(x)\nSecant of x (in radians)\n\n        \ncot(x)\nCotangent of x (in radians)\n\n        \nasin(x)\nInverse Sine (or Arcsine) of x (in radians)\n\n        \nacos(x)\nInverse Cosine (or Arccosine) of x (in radians)\n\n        \natan(x)\nInverse Tangent (or Arctangent) of x (in radians)\n\n        \nacsc(x)\nInverse Cosecant (or Arccosecant) of x (in radians)\n\n        \nasec(x)\nInverse Secant (or Arcsecant) of x (in radians)\n\n        \nacot(x)\nInverse Cotangent (or Arccotangent) of x (in radians)\n\n        \nsinh(x)\nHyperbolic Sine of x\n\n        \ncosh(x)\nHyperbolic Cosine of x\n\n        \ntanh(x)\nHyperbolic Tangent of x\n\n        \ncsch(x)\nHyperbolic Cosecant of x\n\n        \nsech(x)\nHyperbolic Secant of x\n\n        \ncoth(x)\nHyperbolic Cotangent of x\n\n        \nasinh(x)\nInverse Hyperbolic Sine of x\n\n        \nacosh(x)\nInverse Hyperbolic Cosine of x\n\n        \natanh(x)\nInverse Hyperbolic Tangent of x\n\n        \nacsch(x)\nInverse Hyperbolic Cosecant of x\n\n        \nasech(x)\nInverse Hyperbolic Secant of x\n\n        \nacoth(x)\nInverse Hyperbolic Cotangent of x\n\n    \n\n\n\n\n\n\n\nBuilt-in Constants\n\n\nYob expressions can contain any of these built-in constants:\n\n\n\n    \nName\nNumeric Value\nAccepted Formats\n\n    \n\n        \nE\n2.71828182846\nE, e\n\n        \nPi\n3.14159265359\nPI, pi, \u03c0\n\n        \nTau\n6.28318530718\nTAU, tau, \u03c4\n\n        \nPhi\n1.61803398874\nPHI, phi, \u03c6, \u03d5",
            "title": "Expression Reference"
        },
        {
            "location": "/references/expression_reference/#expression-reference",
            "text": "Expressions are used extensively throughout Yob.  Calculated Columns, Functions, and custom Curve Fits all make use of user-defined expressions.  This page is meant to serve as a reference for using expressions throughout the program.  If you are new to using expressions, you may want to check out one of the following tutorials first:   Advanced Curve Fits  Advanced Data Sets",
            "title": "Expression Reference"
        },
        {
            "location": "/references/expression_reference/#general-rules",
            "text": "All expressions should follow the general syntax of mathematics.  Order of operations applies.  All operators need to be explicit.  For example, you cannot write  2x ; you would have to write  2*x  instead.",
            "title": "General Rules"
        },
        {
            "location": "/references/expression_reference/#referencing-other-expressions",
            "text": "A part of what makes expressions so effective is their ability to refer to other expressions.",
            "title": "Referencing Other Expressions"
        },
        {
            "location": "/references/expression_reference/#functions",
            "text": "To refer to a function within an expression, type the following:  fx  Where  x  is the number of the Function (e.g. Function 1 = f1).  Then wrap the input of the Function with (). The input can be any value or expression that is dependent on the independent variable.  f3(x-5)",
            "title": "Functions"
        },
        {
            "location": "/references/expression_reference/#columns",
            "text": "To refer to a Column within an expression, type the following:  dxcy  Where  x  is the number of the Data Set that the Column belongs to, and  y  is the number of the Column to be used (e.g. Data Set 2 Column 2 = d2c2).",
            "title": "Columns"
        },
        {
            "location": "/references/expression_reference/#curve-fits",
            "text": "To refer to a Curve Fit within an expression, type the following:  cfx  Where  x  is the number of the Curve Fit. (e.g. Curve Fit 3 = cf3)  Then wrap the input of the curve fit with () just like with Functions.  cf5(x+1)",
            "title": "Curve Fits"
        },
        {
            "location": "/references/expression_reference/#built-in-functions",
            "text": "Yob expressions can contain any of these built-in functions:  \n     Name Description \n     \n         sqrt(x) Square root of x \n         ln(x) Natural log (base e) of x \n         log(x) Log (base 10) of x \n         log10(x) Log (base 10) of x (for those who wish to be explicit) \n         exp(x) Base e raised to the x power \n         abs(x) Absolute value of x \n         floor(x) Floor of x (round down) \n         ceil(x) Ceiling of x (round up) \n         round(x) x rounded to the nearest integer \n         sin(x) Sine of x (in radians) \n         cos(x) Cosine of x (in radians) \n         tan(x) Tangent of x (in radians) \n         csc(x) Cosecant of x (in radians) \n         sec(x) Secant of x (in radians) \n         cot(x) Cotangent of x (in radians) \n         asin(x) Inverse Sine (or Arcsine) of x (in radians) \n         acos(x) Inverse Cosine (or Arccosine) of x (in radians) \n         atan(x) Inverse Tangent (or Arctangent) of x (in radians) \n         acsc(x) Inverse Cosecant (or Arccosecant) of x (in radians) \n         asec(x) Inverse Secant (or Arcsecant) of x (in radians) \n         acot(x) Inverse Cotangent (or Arccotangent) of x (in radians) \n         sinh(x) Hyperbolic Sine of x \n         cosh(x) Hyperbolic Cosine of x \n         tanh(x) Hyperbolic Tangent of x \n         csch(x) Hyperbolic Cosecant of x \n         sech(x) Hyperbolic Secant of x \n         coth(x) Hyperbolic Cotangent of x \n         asinh(x) Inverse Hyperbolic Sine of x \n         acosh(x) Inverse Hyperbolic Cosine of x \n         atanh(x) Inverse Hyperbolic Tangent of x \n         acsch(x) Inverse Hyperbolic Cosecant of x \n         asech(x) Inverse Hyperbolic Secant of x \n         acoth(x) Inverse Hyperbolic Cotangent of x",
            "title": "Built-in Functions"
        },
        {
            "location": "/references/expression_reference/#built-in-constants",
            "text": "Yob expressions can contain any of these built-in constants:  \n     Name Numeric Value Accepted Formats \n     \n         E 2.71828182846 E, e \n         Pi 3.14159265359 PI, pi, \u03c0 \n         Tau 6.28318530718 TAU, tau, \u03c4 \n         Phi 1.61803398874 PHI, phi, \u03c6, \u03d5",
            "title": "Built-in Constants"
        },
        {
            "location": "/references/calculated_columns/",
            "text": "Using Calculated Columns\n\n\nCalculated Columns is a powerful feature in Yob that allows you to generate new columns from other columns, saving you the time of manual data entry.  Another benefit of Calculated Columns is that they are updated dynamically, so you can make changes on the fly without having to manually recalculate anything.\nEach column of a Data Set has a calculated column menu that can be opened by clicking on the calculator icon in the top right of the column header.\n\n\nThe Calculated Column menu contains 3 items:\n\n\n\n\nThe expression field\n\n\nThe data selector\n\n\nThe enabled checkbox\n\n\n\n\nThe Expression Field\n\n\nThe expression field is what is used to generate the values of the column.  An example would be be \nd1c1 + 2*d2c1\n, which would make each value of the column be the sum of the cooresponding value in the first column of the first Data Set and twice the cooresponding value of the first column of the second Data Set.  You can also reference Functions or Curve Fits in your expressions.  For example, \nf3(d1c1) / 10\n would make each value of the column be 1/10th of the first column of the first Data Set run through the third function.  One thing to watch out for, however, is circular dependencies.  For example, you can't have d1c1 use d2c1 in its expression if d2c1 uses d3c1 and d3c1 uses d1c1, because of the circular dependencies. [more on this]\n\n\nThe Data Type Selector\n\n\nThe data selector provides an easy way to figure out which item it is that you want to use in your Calculated Column expression.  For example, if you wanted to use the Distance column from a Distance vs Time Data Set but didn't know its number, you could simply select it from the list then click \"Insert\", which will insert the proper text... [more on this]\n\n\nThe Enabled Checkbox\n\n\nThe enabled checkbox sets whether or not the Column should generate (or calculate) its values from the expression.\nCalculated Columns cells appear yellow and cannot be modified within the table editor like regular Columns can.",
            "title": "Calculated Columns"
        },
        {
            "location": "/references/calculated_columns/#using-calculated-columns",
            "text": "Calculated Columns is a powerful feature in Yob that allows you to generate new columns from other columns, saving you the time of manual data entry.  Another benefit of Calculated Columns is that they are updated dynamically, so you can make changes on the fly without having to manually recalculate anything.\nEach column of a Data Set has a calculated column menu that can be opened by clicking on the calculator icon in the top right of the column header.  The Calculated Column menu contains 3 items:   The expression field  The data selector  The enabled checkbox",
            "title": "Using Calculated Columns"
        },
        {
            "location": "/references/calculated_columns/#the-expression-field",
            "text": "The expression field is what is used to generate the values of the column.  An example would be be  d1c1 + 2*d2c1 , which would make each value of the column be the sum of the cooresponding value in the first column of the first Data Set and twice the cooresponding value of the first column of the second Data Set.  You can also reference Functions or Curve Fits in your expressions.  For example,  f3(d1c1) / 10  would make each value of the column be 1/10th of the first column of the first Data Set run through the third function.  One thing to watch out for, however, is circular dependencies.  For example, you can't have d1c1 use d2c1 in its expression if d2c1 uses d3c1 and d3c1 uses d1c1, because of the circular dependencies. [more on this]",
            "title": "The Expression Field"
        },
        {
            "location": "/references/calculated_columns/#the-data-type-selector",
            "text": "The data selector provides an easy way to figure out which item it is that you want to use in your Calculated Column expression.  For example, if you wanted to use the Distance column from a Distance vs Time Data Set but didn't know its number, you could simply select it from the list then click \"Insert\", which will insert the proper text... [more on this]",
            "title": "The Data Type Selector"
        },
        {
            "location": "/references/calculated_columns/#the-enabled-checkbox",
            "text": "The enabled checkbox sets whether or not the Column should generate (or calculate) its values from the expression.\nCalculated Columns cells appear yellow and cannot be modified within the table editor like regular Columns can.",
            "title": "The Enabled Checkbox"
        },
        {
            "location": "/about/",
            "text": "About\n\n\nYob was a project started by \nTanner Nielsen\n and \nJordan Hendrickson\n in the spring of 2014, motivated by our appreciation for the teacher of our high school physics class, as well as the dislike for the graphing software he had us use.\n\n\n\n\nDevelopment\n\n\nOriginally, we were developing in Java and our plans for the software were much more ambitious.  We weren't experienced developers, but we managed to hack together an account system and beginnings of an assignment editor by the end of the summer.  The old login screen looked like this:\n\n\n\n\n\nTo our surprise, the school decided to replace all of the lab laptops with Chromebooks that fall, which Java applications were not easily compatible with.  Moreover, all of the teachers had started using Google Classroom, which made our software largely irrelevant.\n\n\nThis was a huge setback for us, and we nearly gave up, but we decided to start over in JavaScript, an entirely new language to us at the time.  We also chose to scale back and focus on making a graphing application to complent, rather than replace Google Docs and Google Classroom.  This decision and two years of development got the project to where it is today.\n\n\n\n\nAcknowledgements\n\n\nWe owe a great debt of gratitude to \nMr. Dean Roush\n, the Physics and Math teacher at Luck High School, for helping us test and shape the software to his needs.  This project would have never gotten off the ground without his patience, encouragement, trust, and willingness to test our software as it developed.",
            "title": "About"
        },
        {
            "location": "/about/#about",
            "text": "Yob was a project started by  Tanner Nielsen  and  Jordan Hendrickson  in the spring of 2014, motivated by our appreciation for the teacher of our high school physics class, as well as the dislike for the graphing software he had us use.",
            "title": "About"
        },
        {
            "location": "/about/#development",
            "text": "Originally, we were developing in Java and our plans for the software were much more ambitious.  We weren't experienced developers, but we managed to hack together an account system and beginnings of an assignment editor by the end of the summer.  The old login screen looked like this:   To our surprise, the school decided to replace all of the lab laptops with Chromebooks that fall, which Java applications were not easily compatible with.  Moreover, all of the teachers had started using Google Classroom, which made our software largely irrelevant.  This was a huge setback for us, and we nearly gave up, but we decided to start over in JavaScript, an entirely new language to us at the time.  We also chose to scale back and focus on making a graphing application to complent, rather than replace Google Docs and Google Classroom.  This decision and two years of development got the project to where it is today.",
            "title": "Development"
        },
        {
            "location": "/about/#acknowledgements",
            "text": "We owe a great debt of gratitude to  Mr. Dean Roush , the Physics and Math teacher at Luck High School, for helping us test and shape the software to his needs.  This project would have never gotten off the ground without his patience, encouragement, trust, and willingness to test our software as it developed.",
            "title": "Acknowledgements"
        }
    ]
}
