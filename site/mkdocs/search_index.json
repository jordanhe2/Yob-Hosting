{
    "docs": [
        {
            "location": "/",
            "text": "Yob Documentation\n\n\n\n\nOverview\n\n\nYob is a \nfast\n and \nsimple\n graphing tool that's geared towards performing graphical analysis within Google Docs.\n\n\nSimple but powerful\n\n\nMaking graphs in Yob is quick and easy, making it a great choice for users who just want to plot some data and stick the graph in a document.  However, Yob also comes with many advanced features such as \ncalculated columns\n and \nnon-linear curve fitting\n, making it a useful tool for more advanced users.\n\n\nConvenient\n\n\nYob runs entirely within a Google Doc, so you never have to worry about transferring graphs between your computer and the document.  In fact, Yob \nblurs the lines\n between graph files and your document entirely.\n\n\n\n\nGetting Started\n\n\nFollow \nthis tutorial\n to familiarize yourself with the basics of Yob.  More advanced users can check out the references to learn more.\n\n\nKeep in mind we are still building the documentation for Yob, so if you click on a link and find an empty or incomplete page, we apologize.\n\n\nThank you for using Yob!",
            "title": "Home"
        },
        {
            "location": "/#yob-documentation",
            "text": "",
            "title": "Yob Documentation"
        },
        {
            "location": "/#overview",
            "text": "Yob is a  fast  and  simple  graphing tool that's geared towards performing graphical analysis within Google Docs.",
            "title": "Overview"
        },
        {
            "location": "/#simple-but-powerful",
            "text": "Making graphs in Yob is quick and easy, making it a great choice for users who just want to plot some data and stick the graph in a document.  However, Yob also comes with many advanced features such as  calculated columns  and  non-linear curve fitting , making it a useful tool for more advanced users.",
            "title": "Simple but powerful"
        },
        {
            "location": "/#convenient",
            "text": "Yob runs entirely within a Google Doc, so you never have to worry about transferring graphs between your computer and the document.  In fact, Yob  blurs the lines  between graph files and your document entirely.",
            "title": "Convenient"
        },
        {
            "location": "/#getting-started",
            "text": "Follow  this tutorial  to familiarize yourself with the basics of Yob.  More advanced users can check out the references to learn more.  Keep in mind we are still building the documentation for Yob, so if you click on a link and find an empty or incomplete page, we apologize.  Thank you for using Yob!",
            "title": "Getting Started"
        },
        {
            "location": "/tutorials/getting_started/",
            "text": "Getting Started\n\n\nFor this tutorial, we will demonstrate the basics of Yob by plotting the time and distance traveled of a ball rolling across the floor and determining its projected distance traveled as time goes on.\n\n\n\n\nInstallation\n\n\nFirst thing\u2019s first.  If you don\u2019t have Yob installed already, visit our \nGoogle Doc add-on store page\n.\n\n\nTo start Yob, open a Google Doc and select \nAdd-ons\n > \nYob\n > \nOpen Editor\n.\n\n\n\n\n\n\n\nThe Home Screen\n\n\nWhen you open the graph editor, you should see something like this:\n\n\n\n\n\nThe home screen is organized into two sections:  the graph preview, and the main menu. The graph preview can be moved by clicking and dragging, and zoomed by scrolling the mouse wheel. The main menu contains several submenus for managing specific parts of your graph.  Let\u2019s start with the Data Set menu.\n\n\n\n\nPlotting Data\n\n\nClick \u201cData Sets\u201d from the main menu, then click the + icon to create a new Data Set. Locate the table editor at the bottom of the menu.  Here, we can enter the time-distance data from our ball experiment. Here is some sample data that we have supplied for you (you may simply copy and paste this data):\n\n\n\n    \nTime (s)\nDistance (m)\n\n    \n1.0\n1.5\n\n    \n1.5\n1.8\n\n    \n2.0\n2.3\n\n    \n2.5\n2.6\n\n    \n3.0\n3.5\n\n    \n3.5\n3.7\n\n    \n4.0\n4.2\n\n    \n4.5\n4.9\n\n    \n5.0\n5.3\n\n\n\n\n\nOnce entered into the table, the data can be viewed in the graph preview.  To automatically fit the window to show all of the data, select the \nAuto Zoom\n checkbox.\n\n\nNext, let\u2019s put proper labels on our Data Set.  We will set the xLabel field to \nTime\n and the xUnit field to \ns\n for seconds, then the yLabel field to \nDistance\n and the yUnit field to \nm\n for meters.\n\n\nYour graph should now look something like the following:\n\n\n\n\n\n\n\nFinding the Projected Distance\n\n\nNow that we have plotted the data, we can find the projected distance of the ball as time goes on. To accomplish this, we want to create a Curve Fit, which will calculate the line of best fit, given a Data Set and a model.\n\n\nClick \u201cBack\u201d to return to the main menu.  Then click the Curve Fits submenu, and click the + icon to create a new Curve Fit.\n\n\nSet the data source of the new Curve Fit to the Data Set we previously created:  Data Set 1. Then change the model type from none to linear. Viola! You should now see the line of best fit for this data on the graph.\n\n\n\n\n\n\n\nAdding the Finishing Touches\n\n\nTo introduce a little more color on this graph, let\u2019s change the style of the Curve Fit line.  To accomplish this, click on the line preview icon near the top of the menu.  You will be presented with several styling options.  Let\u2019s change the color blue and make the line dashed, like so:\n\n\n\n\n\nAnd what\u2019s a graph without a title?  A title can be added to the graph back in the Labels submenu.  At the top of the menu, enter \u201cDistance vs Time\u201d in the Title field.  When you're done, you should have something like this:\n\n\n\n\n\n\n\nInserting the Graph\n\n\nNow that our graph is complete, we can send it to the document. To do this, simply click \u201cInsert\u201d at the top of Yob, then select the size of the graph you want to insert. After the graph is added, you may notice that it has a link attached to it. \nDo not remove this link.\n This link is how Yob knows where the graph data is stored on your Google Drive account, so that you may edit the graph later if you wish.\n\n\nIf you would like to learn more about how Yob stores graph data, view \nthe data storage reference\n where we explain this in greater detail.\n\n\n\n\nCheck Out the Other Tutorials\n\n\nYob is full of great features that are covered throughout our tutorial series. Click the \u201cNext\u201d button above to move on to the next tutorial.",
            "title": "Getting Started"
        },
        {
            "location": "/tutorials/getting_started/#getting-started",
            "text": "For this tutorial, we will demonstrate the basics of Yob by plotting the time and distance traveled of a ball rolling across the floor and determining its projected distance traveled as time goes on.",
            "title": "Getting Started"
        },
        {
            "location": "/tutorials/getting_started/#installation",
            "text": "First thing\u2019s first.  If you don\u2019t have Yob installed already, visit our  Google Doc add-on store page .  To start Yob, open a Google Doc and select  Add-ons  >  Yob  >  Open Editor .",
            "title": "Installation"
        },
        {
            "location": "/tutorials/getting_started/#the-home-screen",
            "text": "When you open the graph editor, you should see something like this:   The home screen is organized into two sections:  the graph preview, and the main menu. The graph preview can be moved by clicking and dragging, and zoomed by scrolling the mouse wheel. The main menu contains several submenus for managing specific parts of your graph.  Let\u2019s start with the Data Set menu.",
            "title": "The Home Screen"
        },
        {
            "location": "/tutorials/getting_started/#plotting-data",
            "text": "Click \u201cData Sets\u201d from the main menu, then click the + icon to create a new Data Set. Locate the table editor at the bottom of the menu.  Here, we can enter the time-distance data from our ball experiment. Here is some sample data that we have supplied for you (you may simply copy and paste this data):  \n     Time (s) Distance (m) \n     1.0 1.5 \n     1.5 1.8 \n     2.0 2.3 \n     2.5 2.6 \n     3.0 3.5 \n     3.5 3.7 \n     4.0 4.2 \n     4.5 4.9 \n     5.0 5.3   Once entered into the table, the data can be viewed in the graph preview.  To automatically fit the window to show all of the data, select the  Auto Zoom  checkbox.  Next, let\u2019s put proper labels on our Data Set.  We will set the xLabel field to  Time  and the xUnit field to  s  for seconds, then the yLabel field to  Distance  and the yUnit field to  m  for meters.  Your graph should now look something like the following:",
            "title": "Plotting Data"
        },
        {
            "location": "/tutorials/getting_started/#finding-the-projected-distance",
            "text": "Now that we have plotted the data, we can find the projected distance of the ball as time goes on. To accomplish this, we want to create a Curve Fit, which will calculate the line of best fit, given a Data Set and a model.  Click \u201cBack\u201d to return to the main menu.  Then click the Curve Fits submenu, and click the + icon to create a new Curve Fit.  Set the data source of the new Curve Fit to the Data Set we previously created:  Data Set 1. Then change the model type from none to linear. Viola! You should now see the line of best fit for this data on the graph.",
            "title": "Finding the Projected Distance"
        },
        {
            "location": "/tutorials/getting_started/#adding-the-finishing-touches",
            "text": "To introduce a little more color on this graph, let\u2019s change the style of the Curve Fit line.  To accomplish this, click on the line preview icon near the top of the menu.  You will be presented with several styling options.  Let\u2019s change the color blue and make the line dashed, like so:   And what\u2019s a graph without a title?  A title can be added to the graph back in the Labels submenu.  At the top of the menu, enter \u201cDistance vs Time\u201d in the Title field.  When you're done, you should have something like this:",
            "title": "Adding the Finishing Touches"
        },
        {
            "location": "/tutorials/getting_started/#inserting-the-graph",
            "text": "Now that our graph is complete, we can send it to the document. To do this, simply click \u201cInsert\u201d at the top of Yob, then select the size of the graph you want to insert. After the graph is added, you may notice that it has a link attached to it.  Do not remove this link.  This link is how Yob knows where the graph data is stored on your Google Drive account, so that you may edit the graph later if you wish.  If you would like to learn more about how Yob stores graph data, view  the data storage reference  where we explain this in greater detail.",
            "title": "Inserting the Graph"
        },
        {
            "location": "/tutorials/getting_started/#check-out-the-other-tutorials",
            "text": "Yob is full of great features that are covered throughout our tutorial series. Click the \u201cNext\u201d button above to move on to the next tutorial.",
            "title": "Check Out the Other Tutorials"
        },
        {
            "location": "/tutorials/advanced_data_sets/",
            "text": "Advanced Data Sets\n\n\nIn this tutorial, we will demonstrate how to take full advantage of Data Sets to maximize efficiency in a more complicated experiment.  For this experiment, we will be plotting the 2D coordinates of a ball rolling down a bumpy hill and generating other data from the coordinate information.\n\n\nIf you haven\u2019t done so already, you may want to check out the \nGetting Started tutorial\n before you continue.\n\n\n\n\nThe Data\n\n\n\n    \n\n        \nTime (s)\n\n        \n0.0\n\n        \n0.5\n\n        \n1.0\n\n        \n1.5\n\n        \n2.0\n\n        \n2.5\n\n        \n3.0\n\n        \n3.5\n\n        \n4.0\n\n        \n4.5\n\n        \n5.0\n\n        \n5.5\n\n        \n6.0\n\n\n\n    \n\n        \nX (m)\n\n        \n0.00\n\n        \n0.03\n\n        \n0.10\n\n        \n0.22\n\n        \n0.40\n\n        \n0.62\n\n        \n0.90\n\n        \n1.22\n\n        \n1.60\n\n        \n2.02\n\n        \n2.50\n\n        \n3.02\n\n        \n3.60\n\n\n\n    \n\n        \nY (m)\n\n        \n0.00\n\n        \n0.47\n\n        \n0.84\n\n        \n0.99\n\n        \n0.90\n\n        \n0.59\n\n        \n0.14\n\n        \n-0.35\n\n        \n-0.75\n\n        \n-0.97\n\n        \n-0.95\n\n        \n-0.70\n\n        \n-0.27\n\n\n\n\n\n\nAbove, we have collected the X and Y coordinates of a ball as it rolls down a bumpy surface over time.  Let\u2019s start with making a Data Set to plot how \nX\n changes with \nTime\n.  To do this, create a new Data Set, then simply copy the Time and X rows and paste them into their respective columns in the table editor. \n\n\n\n\nNote\n\n\nYob will automatically detect when you have copied a row and will rotate your data to fill the column you're trying to paste to.\n\n\n\n\n\nAfter you paste the data, you can throw on some labels like so:\n\n\n\n\n\n\n\nSharing Columns\n\n\nNow suppose that we want to overlay a second Data Set comparing the \nY\n with Time.  You may be thinking that we just need to create a new Data Set and copy over the Y and Time data, and you wouldn't be wrong, but there are a few issues with that approach.  Allow us to show you a slightly different way, and then we'll explain why it's beneficial.\n\n\nFirst, create a new Data Set and copy just the \nY\n row into the second column.  We're going to leave the first column empty for now.  Label the columns similarly to the first Data Set like so:\n\n\n\n\n\nNext, click the calculator icon in the top right of the first column.  You will be presented with the following dialog:\n\n\n\n\n\nEvery column can be configured to calculate its values from the values of other columns.  In this case, we want the column to simply mirror the values from Time column of the first Data Set.\n\n\nTo do this, select \nData Set 1 - Time (d1c1)\n from the dropdown menu and click \nInsert\n.  Every column has a code name for simple referencing, so when you see \nd2c1 = d1c1\n, that means that the values from column 1 of Data Set 2 should equal the values from column 1 of Data Set 1.  You can use the dropdown menu to find the name of the column you're looking for.\n\n\nCheck the \nEnabled\n check box to make the calculations take effect.  Now all of the Time values should have automatically filled the column:\n\n\n\n\n\n\n\nNote\n\n\nCalculated columns cannot be edited since they are generated from other columns.  They are turned yellow to remind you of this:\n\n\n\n\nBenefits\n\n\nYou may be wondering why we took this round-about way of getting the time values into a second column.  What's wrong with copying and pasting?\n\n\nWell, in this experiment it wouldn't have been so bad to simply copy and paste, but imagine an experiement where you were plotting \nten different dependent variables\n against the same independent variable.  Not only would you have to copy and paste the same data ten times, but if you ever discovered a mistake, you would have to correct it in \nten different places\n.\n\n\nWhen you are using Calculated Columns, changes to the source column will propagate out to all the columns that depend on it, saving you time and mistakes.\n\n\n\n\nGenerating Columns\n\n\nIf all has gone well thus far, your graph should look something like this:\n\n\n\n\n\nNow suppose that we want to overlay a third Data Set showing the total distance between the ball and the origin.  We can calculate the values easily using the Euclidean distance forumla, \n, but crunching all of the numbers by hand is tedious.  This would be another great place to make use of Calculated Columns.\n\n\nLet's start by making another Data Set and using the same technique we used above to copy the Time data into the first column:  First, create a new Data Set, then click the calculator icon in the top right of the first column.  Select \nData Set 1 - Time (d1c1)\n from the dropdown menu, click \nInsert\n, then check the \nEnabled\n check box:\n\n\n\n\n\nBefore we continue, let's put some labels on this Data Set like so:\n\n\n\n\n\nNow let's go ahead and fill our distance column.  If we were doing this by hand, we'd have to manually put each value from the X and Y columns through the \n formula to get the values for distance.  With Calculated Columns, we can simply plug in this formula, and all the values will be calculated automatically:\n\n\nClick on the calculator icon in the top right of the distance column, and enter \nsqrt((d1c2)^2 + (d2c2)^2)\n into the expression field.  This expression is saying that we want each value of the column to be the square root of the cooresponding \nX\n value (Data Set 1, Column 2) squared, and the cooresponding \nY\n value (Data Set2, Column 2) squared.\n\n\n\n\nTip\n\n\nIf you are struggling to get column names right, you can always use the drop down menu to locate and insert the names that you looking for.\n\n\n\n\n\nLastly, check the \nEnabled\n check box.  If you have done everything correctly, your graph should look like the following:\n\n\n\n\n\n\n\nLearn More\n\n\nIf you would like to learn more about Calculated Columns and expressions, check out these references:\n\n\n\n\nCalculated Column Reference\n\n\nExpression Reference",
            "title": "Advanced Data Sets"
        },
        {
            "location": "/tutorials/advanced_data_sets/#advanced-data-sets",
            "text": "In this tutorial, we will demonstrate how to take full advantage of Data Sets to maximize efficiency in a more complicated experiment.  For this experiment, we will be plotting the 2D coordinates of a ball rolling down a bumpy hill and generating other data from the coordinate information.  If you haven\u2019t done so already, you may want to check out the  Getting Started tutorial  before you continue.",
            "title": "Advanced Data Sets"
        },
        {
            "location": "/tutorials/advanced_data_sets/#the-data",
            "text": "Time (s) \n         0.0 \n         0.5 \n         1.0 \n         1.5 \n         2.0 \n         2.5 \n         3.0 \n         3.5 \n         4.0 \n         4.5 \n         5.0 \n         5.5 \n         6.0  \n     \n         X (m) \n         0.00 \n         0.03 \n         0.10 \n         0.22 \n         0.40 \n         0.62 \n         0.90 \n         1.22 \n         1.60 \n         2.02 \n         2.50 \n         3.02 \n         3.60  \n     \n         Y (m) \n         0.00 \n         0.47 \n         0.84 \n         0.99 \n         0.90 \n         0.59 \n         0.14 \n         -0.35 \n         -0.75 \n         -0.97 \n         -0.95 \n         -0.70 \n         -0.27    Above, we have collected the X and Y coordinates of a ball as it rolls down a bumpy surface over time.  Let\u2019s start with making a Data Set to plot how  X  changes with  Time .  To do this, create a new Data Set, then simply copy the Time and X rows and paste them into their respective columns in the table editor.    Note  Yob will automatically detect when you have copied a row and will rotate your data to fill the column you're trying to paste to.   After you paste the data, you can throw on some labels like so:",
            "title": "The Data"
        },
        {
            "location": "/tutorials/advanced_data_sets/#sharing-columns",
            "text": "Now suppose that we want to overlay a second Data Set comparing the  Y  with Time.  You may be thinking that we just need to create a new Data Set and copy over the Y and Time data, and you wouldn't be wrong, but there are a few issues with that approach.  Allow us to show you a slightly different way, and then we'll explain why it's beneficial.  First, create a new Data Set and copy just the  Y  row into the second column.  We're going to leave the first column empty for now.  Label the columns similarly to the first Data Set like so:   Next, click the calculator icon in the top right of the first column.  You will be presented with the following dialog:   Every column can be configured to calculate its values from the values of other columns.  In this case, we want the column to simply mirror the values from Time column of the first Data Set.  To do this, select  Data Set 1 - Time (d1c1)  from the dropdown menu and click  Insert .  Every column has a code name for simple referencing, so when you see  d2c1 = d1c1 , that means that the values from column 1 of Data Set 2 should equal the values from column 1 of Data Set 1.  You can use the dropdown menu to find the name of the column you're looking for.  Check the  Enabled  check box to make the calculations take effect.  Now all of the Time values should have automatically filled the column:    Note  Calculated columns cannot be edited since they are generated from other columns.  They are turned yellow to remind you of this:",
            "title": "Sharing Columns"
        },
        {
            "location": "/tutorials/advanced_data_sets/#benefits",
            "text": "You may be wondering why we took this round-about way of getting the time values into a second column.  What's wrong with copying and pasting?  Well, in this experiment it wouldn't have been so bad to simply copy and paste, but imagine an experiement where you were plotting  ten different dependent variables  against the same independent variable.  Not only would you have to copy and paste the same data ten times, but if you ever discovered a mistake, you would have to correct it in  ten different places .  When you are using Calculated Columns, changes to the source column will propagate out to all the columns that depend on it, saving you time and mistakes.",
            "title": "Benefits"
        },
        {
            "location": "/tutorials/advanced_data_sets/#generating-columns",
            "text": "If all has gone well thus far, your graph should look something like this:   Now suppose that we want to overlay a third Data Set showing the total distance between the ball and the origin.  We can calculate the values easily using the Euclidean distance forumla,  , but crunching all of the numbers by hand is tedious.  This would be another great place to make use of Calculated Columns.  Let's start by making another Data Set and using the same technique we used above to copy the Time data into the first column:  First, create a new Data Set, then click the calculator icon in the top right of the first column.  Select  Data Set 1 - Time (d1c1)  from the dropdown menu, click  Insert , then check the  Enabled  check box:   Before we continue, let's put some labels on this Data Set like so:   Now let's go ahead and fill our distance column.  If we were doing this by hand, we'd have to manually put each value from the X and Y columns through the   formula to get the values for distance.  With Calculated Columns, we can simply plug in this formula, and all the values will be calculated automatically:  Click on the calculator icon in the top right of the distance column, and enter  sqrt((d1c2)^2 + (d2c2)^2)  into the expression field.  This expression is saying that we want each value of the column to be the square root of the cooresponding  X  value (Data Set 1, Column 2) squared, and the cooresponding  Y  value (Data Set2, Column 2) squared.   Tip  If you are struggling to get column names right, you can always use the drop down menu to locate and insert the names that you looking for.   Lastly, check the  Enabled  check box.  If you have done everything correctly, your graph should look like the following:",
            "title": "Generating Columns"
        },
        {
            "location": "/tutorials/advanced_data_sets/#learn-more",
            "text": "If you would like to learn more about Calculated Columns and expressions, check out these references:   Calculated Column Reference  Expression Reference",
            "title": "Learn More"
        },
        {
            "location": "/tutorials/advanced_curve_fits/",
            "text": "Advanced Curve Fits\n\n\nIn this tutorial, we will cover some of the more advanced features of Yob's Curve Fitting.  Our example will determine the apex of a football's trajectory using sparse data.\n\n\nIf you haven\u2019t done so already, you may want to check out the \nGetting Started tutorial\n before you continue.\n\n\n\n\nThe Data\n\n\n\n    \n\n        \nTime (s)\nHeight (m)\n\n    \n\n    \n\n        \n0.0\n1.885\n\n        \n0.5\n16.435\n\n        \n1.0\n22.49\n\n        \n1.5\n24.092\n\n        \n2.0\n22.289\n\n        \n2.5\n19.084\n\n        \n3.0\n5.375\n\n    \n\n\n\n\nCopy this data into a new Data Set and set the appropriate labels.  If you don't know how do this, you may want to take a look at our \nGetting Started tutorial\n to learn how.  If all goes well, you should have something like this:\n\n\n\n\n\n\n\nFitting a Curve\n\n\nNow, let's go ahead create a new Curve Fit from the Curve Fit menu.  First, we will select the Data Set we just created from the Data Source selector since this is the data we want to fit.  Then, within the Model submenu, we want select \nquadratic\n for the type, which has the form \nA*x^2 + B*x + C\n.  After doing this, you should see that a curve has been fit to the data:\n\n\n\n\n\nIf you scroll down to the Parameter Output section, you should see the estimated values for A, B, and C.  In this model, A represents the vertical acceleration of the football (i.e. acceleration of gravity), B represents the inital velocity of the football, and C represents the inital height.\n\n\n\n\nUsing a Custom Model\n\n\nSince we were trying to find the apex of the football's trajectory, the variables from the default quadratic model don't really help us.  To better represent this problem, we need a different version of the quadratic model.  The vertex form, or \nA*(x - H)^2 + K\n is what we are looking for.  Yob doesn't support this model by default, but we can create a custom model to represent the vertex form.\n\n\nFirst, select \nCustom\n for the model type, then enter \nA*(x - H)^2 + K\n into the expression field like so:\n\n\n\n\n\nNow the value of H should represent the time that the football reaches the apex of its trajectory, while K represents the height of the apex.\n\n\n\n\nGuess Parameters\n\n\nIt is possible that the Curve Fit didn't quite fit the data as expected, as the following graph illustrates:\n\n\n\n\nWithout going into too much detail, custom models generally need good inital parameter guesses to fit data well.  You can set better guesses by checking the \nManual Guess\n check box within the \nGuess Parameters\n section, then changing the parameter values below.  For this data, we recommend setting A to -9.8, H to 1.5, and K to 25.  (You might not even need to finish entering the guesses before the curve snaps into place.)  To learn more about guess parameters, check out the section on it \nhere\n in the \nCurve Fit Reference\n.\n\n\n\n\n\n\nAlternative Fitting Methods\n\n\nUp until this point, we've largely ignored the \nMethod\n selector in the Curve Fit menu.  For most data sets you will encounter, the default OLS, or \nOrdinary Least Squares\n method will work just fine.  However, there are some situations where an alternative method would be preferred.  Consider the following data for example:\n\n\n\n\n\nThis is a good example of data that is better fit by WLS, or \nWeighted Least Squares\n.  WLS makes the assumption that error increases with the dependent variable, where as OLS assumes that overall error remains constant.  Recognizing when to use alternative methods like this can make a big difference.  For more information on the different fitting methods, check out the \nCurve Fit Reference - Regression Methods\n.",
            "title": "Advanced Curve Fits"
        },
        {
            "location": "/tutorials/advanced_curve_fits/#advanced-curve-fits",
            "text": "In this tutorial, we will cover some of the more advanced features of Yob's Curve Fitting.  Our example will determine the apex of a football's trajectory using sparse data.  If you haven\u2019t done so already, you may want to check out the  Getting Started tutorial  before you continue.",
            "title": "Advanced Curve Fits"
        },
        {
            "location": "/tutorials/advanced_curve_fits/#the-data",
            "text": "Time (s) Height (m) \n     \n     \n         0.0 1.885 \n         0.5 16.435 \n         1.0 22.49 \n         1.5 24.092 \n         2.0 22.289 \n         2.5 19.084 \n         3.0 5.375 \n       Copy this data into a new Data Set and set the appropriate labels.  If you don't know how do this, you may want to take a look at our  Getting Started tutorial  to learn how.  If all goes well, you should have something like this:",
            "title": "The Data"
        },
        {
            "location": "/tutorials/advanced_curve_fits/#fitting-a-curve",
            "text": "Now, let's go ahead create a new Curve Fit from the Curve Fit menu.  First, we will select the Data Set we just created from the Data Source selector since this is the data we want to fit.  Then, within the Model submenu, we want select  quadratic  for the type, which has the form  A*x^2 + B*x + C .  After doing this, you should see that a curve has been fit to the data:   If you scroll down to the Parameter Output section, you should see the estimated values for A, B, and C.  In this model, A represents the vertical acceleration of the football (i.e. acceleration of gravity), B represents the inital velocity of the football, and C represents the inital height.",
            "title": "Fitting a Curve"
        },
        {
            "location": "/tutorials/advanced_curve_fits/#using-a-custom-model",
            "text": "Since we were trying to find the apex of the football's trajectory, the variables from the default quadratic model don't really help us.  To better represent this problem, we need a different version of the quadratic model.  The vertex form, or  A*(x - H)^2 + K  is what we are looking for.  Yob doesn't support this model by default, but we can create a custom model to represent the vertex form.  First, select  Custom  for the model type, then enter  A*(x - H)^2 + K  into the expression field like so:   Now the value of H should represent the time that the football reaches the apex of its trajectory, while K represents the height of the apex.   Guess Parameters  It is possible that the Curve Fit didn't quite fit the data as expected, as the following graph illustrates:   Without going into too much detail, custom models generally need good inital parameter guesses to fit data well.  You can set better guesses by checking the  Manual Guess  check box within the  Guess Parameters  section, then changing the parameter values below.  For this data, we recommend setting A to -9.8, H to 1.5, and K to 25.  (You might not even need to finish entering the guesses before the curve snaps into place.)  To learn more about guess parameters, check out the section on it  here  in the  Curve Fit Reference .",
            "title": "Using a Custom Model"
        },
        {
            "location": "/tutorials/advanced_curve_fits/#alternative-fitting-methods",
            "text": "Up until this point, we've largely ignored the  Method  selector in the Curve Fit menu.  For most data sets you will encounter, the default OLS, or  Ordinary Least Squares  method will work just fine.  However, there are some situations where an alternative method would be preferred.  Consider the following data for example:   This is a good example of data that is better fit by WLS, or  Weighted Least Squares .  WLS makes the assumption that error increases with the dependent variable, where as OLS assumes that overall error remains constant.  Recognizing when to use alternative methods like this can make a big difference.  For more information on the different fitting methods, check out the  Curve Fit Reference - Regression Methods .",
            "title": "Alternative Fitting Methods"
        },
        {
            "location": "/references/storage_and_loading_reference/",
            "text": "Storage and Loading Reference\n\n\nYob utilizes your Google Drive account to store graph information so that it is able to load your graph back into the Yob\n whenever you want to edit it again. In this reference, we breakdown the process by which data is stored and loaded, and how to best manage your graph data.\n\n\n\n\nHow Yob Uses Your Google Drive\n\n\nAll of Yob's content is stored in the \nYob\n folder, which contains the files Yob needs to store on you Google Drive\nand all of Yob's other folders.\n\n\nYob stores its graph files (.yob files) in the \ngraphs\n folder.\n\n\n\n\nDo Not Mix Yob's Files With Your Own\n\n\nIt is advised that you do not attempt to store any of your personal files within Yob folders, as they will be at the mercy of Yob and could be potentially trashed.\n\n\n\n\n\n\nWhat is a Yob Graph?\n\n\nYob recognizes a graph as an image on the current Google Doc with a shareable link to a valid Yob graph file in someone's Google Drive attached to it.\nLet's go over a few examples of valid and invalid graphs.\n\n\nThe image below \nis\n indeed a Yob graph.  It is an image and it contains the shareable link to a valid Yob graph file.\n\n\n\n\n\nThe next image obviously \nis not\n a Yob graph. It is an image of a kitten stuck in a tree and that is all.\n\n\n\n\n\nSurprisingly, this last image \nis\n considered a Yob graph. Since it is an image and it contains a shareable link to a valid Yob graph file, Yob will\n load the graph data from the link. Keep in mind, the content of the image matters not to Yob.  What matters is that is that the image\n contains a valid link.\n\n\n\n\n\n\n\nGraph Files Must be Sharable by Link\n\n\nYob graph files created by Yob are automatically shared so that \nanyone with the link can view\n.\nIf a graph file is not this way, Yob cannot load that graph. \n\n\n\n\nSo now that we know what a Yob graph is, lets see how the data is saved to your Google Drive account.\n\n\n\n\nHow Data is Stored\n\n\nWhenever you click the 'Insert' button to insert a graph, Yob begins the data storage process.\n\n\n\n\n\nFirst, Yob calculates the size of the 'graphs' folder and then if the new chunk of graph data is small enough to fit within the allotted \nspace set by the user, it gets stored into the 'graphs' folder.\n\n\nThen an image of the graph is stored into the document at the location of the cursor or replaces the selected content if\nthere is a selection. A link to the newly saved graph file is then attached to the image.\n\n\n\n\nYob Does Not Keep Track of Graphs\n\n\nYob does not attempt to keep track of all of the graphs on a document that link back to any one specific graph file. So each graph file\n will stay in the graphs folder until it's reached the maximum storage capacity, then the oldest graph files will be trashed.\n\n\n\n\n\n\nManaging Your Data\n\n\nIt was mentioned earlier that Yob checks how much space is currently being used by Yob whenever a graph is inserted.\n This is one step of Yob's larger process of storage management.\n\n\nAs stated above, Yob checks to see if the graph being inserted can fit within the allotted storage space that you have given Yob.\nOnce this allotted space has been filled, Yob will begin to trash the oldest graph files until enough room is made for the new graph.\n\n\n\n\nTrashed Graphs Can Still Be Loaded\n\n\nAlthough Yob puts the oldest graph files into the trash, they still exist on your drive and therefore Yob can \ntechnically\n still load them.\n\nIt is only when the trash is emptied\n that any graphs with the specific graph file can no longer be loaded.\n\n\n\n\nBy default, Yob will use up to 100 MB (About 0.1 GB) of your Google Drive storage. You can increase or shrink this value by adjusting the Yob settings.\n\n\nTo access the Yob settings, select \nAdd-ons\n > \nYob\n > \nOpen Settings\n. A dialog should pop up that looks like this:\n\n\n\n\n\nThe \nMax storage capacity\n field is where you can adjust how much space on your Google Drive account that Yob is allowed to use.\n\n\nIt is very unlikely that you will ever reach 100 MB of graph data.\nA graph with three functions, three data sets with moderate amounts of data, and three curve fits comes out to 3 KB.\nAssuming all graphs you make are this size, you would need to create 34134 graphs to reach 100 MB.\n\n\nThe \nWarn me\n checkbox at the bottom is fairly self-descriptive. When it comes time to make space for a new graph,\na dialog will pop up that looks like this:\n\n\n\n\n\nFrom this dialog you have three options.\n\n\n\n\nOk\n - Yob will proceed to trash the oldest graph files until the new graph can be added.\n\n\nOpen Settings\n - Yob will open the settings menu for you where you can adjust the Max storage capacity value if desired. \n\n\nCancel\n - Yob will not trash any graph files and will not add the new graph.",
            "title": "Storage and Loading Reference"
        },
        {
            "location": "/references/storage_and_loading_reference/#storage-and-loading-reference",
            "text": "Yob utilizes your Google Drive account to store graph information so that it is able to load your graph back into the Yob\n whenever you want to edit it again. In this reference, we breakdown the process by which data is stored and loaded, and how to best manage your graph data.",
            "title": "Storage and Loading Reference"
        },
        {
            "location": "/references/storage_and_loading_reference/#how-yob-uses-your-google-drive",
            "text": "All of Yob's content is stored in the  Yob  folder, which contains the files Yob needs to store on you Google Drive\nand all of Yob's other folders.  Yob stores its graph files (.yob files) in the  graphs  folder.   Do Not Mix Yob's Files With Your Own  It is advised that you do not attempt to store any of your personal files within Yob folders, as they will be at the mercy of Yob and could be potentially trashed.",
            "title": "How Yob Uses Your Google Drive"
        },
        {
            "location": "/references/storage_and_loading_reference/#what-is-a-yob-graph",
            "text": "Yob recognizes a graph as an image on the current Google Doc with a shareable link to a valid Yob graph file in someone's Google Drive attached to it.\nLet's go over a few examples of valid and invalid graphs.  The image below  is  indeed a Yob graph.  It is an image and it contains the shareable link to a valid Yob graph file.   The next image obviously  is not  a Yob graph. It is an image of a kitten stuck in a tree and that is all.   Surprisingly, this last image  is  considered a Yob graph. Since it is an image and it contains a shareable link to a valid Yob graph file, Yob will\n load the graph data from the link. Keep in mind, the content of the image matters not to Yob.  What matters is that is that the image\n contains a valid link.    Graph Files Must be Sharable by Link  Yob graph files created by Yob are automatically shared so that  anyone with the link can view .\nIf a graph file is not this way, Yob cannot load that graph.    So now that we know what a Yob graph is, lets see how the data is saved to your Google Drive account.",
            "title": "What is a Yob Graph?"
        },
        {
            "location": "/references/storage_and_loading_reference/#how-data-is-stored",
            "text": "Whenever you click the 'Insert' button to insert a graph, Yob begins the data storage process.   First, Yob calculates the size of the 'graphs' folder and then if the new chunk of graph data is small enough to fit within the allotted \nspace set by the user, it gets stored into the 'graphs' folder.  Then an image of the graph is stored into the document at the location of the cursor or replaces the selected content if\nthere is a selection. A link to the newly saved graph file is then attached to the image.   Yob Does Not Keep Track of Graphs  Yob does not attempt to keep track of all of the graphs on a document that link back to any one specific graph file. So each graph file\n will stay in the graphs folder until it's reached the maximum storage capacity, then the oldest graph files will be trashed.",
            "title": "How Data is Stored"
        },
        {
            "location": "/references/storage_and_loading_reference/#managing-your-data",
            "text": "It was mentioned earlier that Yob checks how much space is currently being used by Yob whenever a graph is inserted.\n This is one step of Yob's larger process of storage management.  As stated above, Yob checks to see if the graph being inserted can fit within the allotted storage space that you have given Yob.\nOnce this allotted space has been filled, Yob will begin to trash the oldest graph files until enough room is made for the new graph.   Trashed Graphs Can Still Be Loaded  Although Yob puts the oldest graph files into the trash, they still exist on your drive and therefore Yob can  technically  still load them. It is only when the trash is emptied  that any graphs with the specific graph file can no longer be loaded.   By default, Yob will use up to 100 MB (About 0.1 GB) of your Google Drive storage. You can increase or shrink this value by adjusting the Yob settings.  To access the Yob settings, select  Add-ons  >  Yob  >  Open Settings . A dialog should pop up that looks like this:   The  Max storage capacity  field is where you can adjust how much space on your Google Drive account that Yob is allowed to use.  It is very unlikely that you will ever reach 100 MB of graph data.\nA graph with three functions, three data sets with moderate amounts of data, and three curve fits comes out to 3 KB.\nAssuming all graphs you make are this size, you would need to create 34134 graphs to reach 100 MB.  The  Warn me  checkbox at the bottom is fairly self-descriptive. When it comes time to make space for a new graph,\na dialog will pop up that looks like this:   From this dialog you have three options.   Ok  - Yob will proceed to trash the oldest graph files until the new graph can be added.  Open Settings  - Yob will open the settings menu for you where you can adjust the Max storage capacity value if desired.   Cancel  - Yob will not trash any graph files and will not add the new graph.",
            "title": "Managing Your Data"
        },
        {
            "location": "/references/expression_reference/",
            "text": "Expression Reference\n\n\nExpressions are used extensively throughout Yob.  Calculated Columns, Functions, and custom Curve Fits all make use of user-defined expressions.  This page is meant to serve as a reference for using expressions throughout the program.  If you are new to using expressions, you may want to check out one of the following tutorials first:\n\n\n\n\nAdvanced Curve Fits - Custom Models\n\n\nAdvanced Data Sets\n\n\n\n\n\n\nGeneral Rules\n\n\n\n\nAll expressions should follow the general syntax of mathematics.  Order of operations applies.\n\n\nAll operators need to be explicit.  For example, you cannot write \n2x\n; you would have to write \n2*x\n instead.\n\n\n\n\n\n\nHow to Tell When an Expression is Valid\n\n\nIn all of the places that you can edit expressions within Yob, the text field will let you know when your expression is invalid by turning its border red:\n\n\n\n\n\n\n\n\nReferencing Other Items\n\n\nPart of what makes expressions so effective is their ability to refer to other items.  Accomplishing this is simple:\n\n\n\n\n\n\nTo reference a \nFunction\n, simply use its name as you would when using \nbuilt-in functions\n like sin(x) or abs(x).  For example, \nf1(x + 2) + f2(x - 2)\n would be a valid way to reference Functions in an expression.\n\n\n\n\n\n\nTo reference a \nCurve Fit\n, the same principle applies but names are denoted with \"cf\" rather than \"f\".  For example, \ncf1(x / 3) + sin(x)\n would be a valid way to reference a Curve Fit in an expression.\n\n\n\n\n\n\nTo reference a \nData Set Column\n, use the Data Set name along with the column name.  For example, \nd1c2\n would reference the \nsecond\n column of the \nfirst\n Data Set.  However, only Calculated Column expressions are allowed to reference Data Set Columns.  This is demonstrated in the \nAdvanced Data Sets\n tutorial and explained in greater detail in the \nCalculated Columns Reference\n.\n\n\n\n\n\n\nMaintaining Referential Integrity\n\n\nAllowing users to put references in their expressions gives them a lot of freedom, but doing to makes it necessary to impose a few restrictions to maintain referential integrity.  Essentially, this just means that if an expression refers to another item,\n\n\n\n\nThe item needs to exist\n.  For example, \nf3(x) + 4\n is not a valid expression if there are only 2 Functions that exist.  Yob will recognize when this condition is not met and will consider it an \ninvalid expression\n.\n\n\nThe reference cannot create circular dependencies\n.  For example, consider the following function definitions:  \nf1(x) = f2(x) + 1\n, \nf2(x) = f1(x) - 1\n  If you look closely, you can probably see that trying to evaluate one of these functions would be rather unproductive.  Yob will also recognize when this condition is not met and will consider it an \ninvalid expression\n.\n\n\n\n\nRemoving Items\n\n\nWhen you have several items that depend on each other, it can be problematic to remove one of them.  Luckily, Yob automatically adapts the remaining items upon deletion to keep your intent in tact.  Before it does so however, Yob will alert you if the item you're deleting is referenced in other expressions:\n\n\n\n\n\nOk\n will proceed with the deletion and make any necessary adaptions, and \nCancel\n will abort the deletion.  To resolve dependencies with the items that reference the deleted item, Yob will adapt your data in several ways:\n\n\nIndex Shifting (Applies to All Items)\n\n\nSince all items are numbered, removing an item can affect the numbering of other items.  Here's an example of how Yob would resolve an applicable situation:\n\n\n\n\n\nHere, if we simply removed \nf2\n, there would be a gap between \nf1\n and \nf3\n.  To fix this, Yob simply shifts the indices of any functions after \nf2\n (in this case, only \nf3\n) down by one.  This causes \nf3\n to now be \nf2\n, but \nf1\n's expression depended on \nf3\n rather than \nf2\n.  Yob corrects this by modifying \nf1\n's expression, as you can see in the image above.\n\n\nFunction Substitution (Functions and Curve Fits Only)\n\n\nWhen a Function or Curve Fit is removed, and another expression depends upon it directly, Yob will replace all references to it with the contents of its expression.\n\n\n\n\n\nIn the example above, \ncf1\n's expression happened to be \n0.485*x + 3.071\n.\n\n\nDependency Removal (Calculated Columns Only)\n\n\nWhen a Data Set is removed, and a Calculated Column expression references one of its columns, nothing can be done to sensibly retain the expression.  Yob will disable the Calculated Column and clear its expression.  This leaves the data untouched, but the values will no longer be calculated.\n\n\n\n\nBuilt-in Operators\n\n\nYob expressions can contain any of these built-in operators:\n\n\n\n    \nOperator\nDescription\n\n    \n\n        \n+\nAddition\n\n        \n-\nSubtraction\n\n        \n*\nMultiplication\n\n        \n/\nDivision\n\n        \n^\nExponentiation\n\n    \n\n\n\n\n\n\n\nBuilt-in Functions\n\n\nYob expressions can contain any of these built-in functions:\n\n\n\n    \nName\nDescription\n\n    \n\n        \nsqrt(x)\nSquare root of x\n\n        \nln(x)\nNatural log (base e) of x\n\n        \nlog(x)\nLog (base 10) of x\n\n        \nlog10(x)\nLog (base 10) of x (for those who wish to be explicit)\n\n        \nabs(x)\nAbsolute value of x\n\n        \nfloor(x)\nFloor of x (round down)\n\n        \nceil(x)\nCeiling of x (round up)\n\n        \nround(x)\nx rounded to the nearest integer\n\n        \nrandom(x)\nRandom value between 0 and x\n\n        \nsin(x)\nSine of x (in radians)\n\n        \ncos(x)\nCosine of x (in radians)\n\n        \ntan(x)\nTangent of x (in radians)\n\n        \ncsc(x)\nCosecant of x (in radians)\n\n        \nsec(x)\nSecant of x (in radians)\n\n        \ncot(x)\nCotangent of x (in radians)\n\n        \nasin(x)\nInverse Sine (or Arcsine) of x (in radians)\n\n        \nacos(x)\nInverse Cosine (or Arccosine) of x (in radians)\n\n        \natan(x)\nInverse Tangent (or Arctangent) of x (in radians)\n\n        \nacsc(x)\nInverse Cosecant (or Arccosecant) of x (in radians)\n\n        \nasec(x)\nInverse Secant (or Arcsecant) of x (in radians)\n\n        \nacot(x)\nInverse Cotangent (or Arccotangent) of x (in radians)\n\n        \nsinh(x)\nHyperbolic Sine of x\n\n        \ncosh(x)\nHyperbolic Cosine of x\n\n        \ntanh(x)\nHyperbolic Tangent of x\n\n        \ncsch(x)\nHyperbolic Cosecant of x\n\n        \nsech(x)\nHyperbolic Secant of x\n\n        \ncoth(x)\nHyperbolic Cotangent of x\n\n        \nasinh(x)\nInverse Hyperbolic Sine of x\n\n        \nacosh(x)\nInverse Hyperbolic Cosine of x\n\n        \natanh(x)\nInverse Hyperbolic Tangent of x\n\n        \nacsch(x)\nInverse Hyperbolic Cosecant of x\n\n        \nasech(x)\nInverse Hyperbolic Secant of x\n\n        \nacoth(x)\nInverse Hyperbolic Cotangent of x\n\n    \n\n\n\n\n\n\n\nBuilt-in Constants\n\n\nYob expressions can contain any of these built-in constants:\n\n\n\n    \nName\nNumeric Value\nAccepted Formats\n\n    \n\n        \nE\n2.71828182846\nE, e\n\n        \nPi\n3.14159265359\nPI, pi, \u03c0\n\n        \nTau\n6.28318530718\nTAU, tau, \u03c4\n\n        \nPhi\n1.61803398874\nPHI, phi, \u03c6, \u03d5",
            "title": "Expression Reference"
        },
        {
            "location": "/references/expression_reference/#expression-reference",
            "text": "Expressions are used extensively throughout Yob.  Calculated Columns, Functions, and custom Curve Fits all make use of user-defined expressions.  This page is meant to serve as a reference for using expressions throughout the program.  If you are new to using expressions, you may want to check out one of the following tutorials first:   Advanced Curve Fits - Custom Models  Advanced Data Sets",
            "title": "Expression Reference"
        },
        {
            "location": "/references/expression_reference/#general-rules",
            "text": "All expressions should follow the general syntax of mathematics.  Order of operations applies.  All operators need to be explicit.  For example, you cannot write  2x ; you would have to write  2*x  instead.    How to Tell When an Expression is Valid  In all of the places that you can edit expressions within Yob, the text field will let you know when your expression is invalid by turning its border red:",
            "title": "General Rules"
        },
        {
            "location": "/references/expression_reference/#referencing-other-items",
            "text": "Part of what makes expressions so effective is their ability to refer to other items.  Accomplishing this is simple:    To reference a  Function , simply use its name as you would when using  built-in functions  like sin(x) or abs(x).  For example,  f1(x + 2) + f2(x - 2)  would be a valid way to reference Functions in an expression.    To reference a  Curve Fit , the same principle applies but names are denoted with \"cf\" rather than \"f\".  For example,  cf1(x / 3) + sin(x)  would be a valid way to reference a Curve Fit in an expression.    To reference a  Data Set Column , use the Data Set name along with the column name.  For example,  d1c2  would reference the  second  column of the  first  Data Set.  However, only Calculated Column expressions are allowed to reference Data Set Columns.  This is demonstrated in the  Advanced Data Sets  tutorial and explained in greater detail in the  Calculated Columns Reference .",
            "title": "Referencing Other Items"
        },
        {
            "location": "/references/expression_reference/#maintaining-referential-integrity",
            "text": "Allowing users to put references in their expressions gives them a lot of freedom, but doing to makes it necessary to impose a few restrictions to maintain referential integrity.  Essentially, this just means that if an expression refers to another item,   The item needs to exist .  For example,  f3(x) + 4  is not a valid expression if there are only 2 Functions that exist.  Yob will recognize when this condition is not met and will consider it an  invalid expression .  The reference cannot create circular dependencies .  For example, consider the following function definitions:   f1(x) = f2(x) + 1 ,  f2(x) = f1(x) - 1   If you look closely, you can probably see that trying to evaluate one of these functions would be rather unproductive.  Yob will also recognize when this condition is not met and will consider it an  invalid expression .",
            "title": "Maintaining Referential Integrity"
        },
        {
            "location": "/references/expression_reference/#removing-items",
            "text": "When you have several items that depend on each other, it can be problematic to remove one of them.  Luckily, Yob automatically adapts the remaining items upon deletion to keep your intent in tact.  Before it does so however, Yob will alert you if the item you're deleting is referenced in other expressions:   Ok  will proceed with the deletion and make any necessary adaptions, and  Cancel  will abort the deletion.  To resolve dependencies with the items that reference the deleted item, Yob will adapt your data in several ways:",
            "title": "Removing Items"
        },
        {
            "location": "/references/expression_reference/#index-shifting-applies-to-all-items",
            "text": "Since all items are numbered, removing an item can affect the numbering of other items.  Here's an example of how Yob would resolve an applicable situation:   Here, if we simply removed  f2 , there would be a gap between  f1  and  f3 .  To fix this, Yob simply shifts the indices of any functions after  f2  (in this case, only  f3 ) down by one.  This causes  f3  to now be  f2 , but  f1 's expression depended on  f3  rather than  f2 .  Yob corrects this by modifying  f1 's expression, as you can see in the image above.",
            "title": "Index Shifting (Applies to All Items)"
        },
        {
            "location": "/references/expression_reference/#function-substitution-functions-and-curve-fits-only",
            "text": "When a Function or Curve Fit is removed, and another expression depends upon it directly, Yob will replace all references to it with the contents of its expression.   In the example above,  cf1 's expression happened to be  0.485*x + 3.071 .",
            "title": "Function Substitution (Functions and Curve Fits Only)"
        },
        {
            "location": "/references/expression_reference/#dependency-removal-calculated-columns-only",
            "text": "When a Data Set is removed, and a Calculated Column expression references one of its columns, nothing can be done to sensibly retain the expression.  Yob will disable the Calculated Column and clear its expression.  This leaves the data untouched, but the values will no longer be calculated.",
            "title": "Dependency Removal (Calculated Columns Only)"
        },
        {
            "location": "/references/expression_reference/#built-in-operators",
            "text": "Yob expressions can contain any of these built-in operators:  \n     Operator Description \n     \n         + Addition \n         - Subtraction \n         * Multiplication \n         / Division \n         ^ Exponentiation",
            "title": "Built-in Operators"
        },
        {
            "location": "/references/expression_reference/#built-in-functions",
            "text": "Yob expressions can contain any of these built-in functions:  \n     Name Description \n     \n         sqrt(x) Square root of x \n         ln(x) Natural log (base e) of x \n         log(x) Log (base 10) of x \n         log10(x) Log (base 10) of x (for those who wish to be explicit) \n         abs(x) Absolute value of x \n         floor(x) Floor of x (round down) \n         ceil(x) Ceiling of x (round up) \n         round(x) x rounded to the nearest integer \n         random(x) Random value between 0 and x \n         sin(x) Sine of x (in radians) \n         cos(x) Cosine of x (in radians) \n         tan(x) Tangent of x (in radians) \n         csc(x) Cosecant of x (in radians) \n         sec(x) Secant of x (in radians) \n         cot(x) Cotangent of x (in radians) \n         asin(x) Inverse Sine (or Arcsine) of x (in radians) \n         acos(x) Inverse Cosine (or Arccosine) of x (in radians) \n         atan(x) Inverse Tangent (or Arctangent) of x (in radians) \n         acsc(x) Inverse Cosecant (or Arccosecant) of x (in radians) \n         asec(x) Inverse Secant (or Arcsecant) of x (in radians) \n         acot(x) Inverse Cotangent (or Arccotangent) of x (in radians) \n         sinh(x) Hyperbolic Sine of x \n         cosh(x) Hyperbolic Cosine of x \n         tanh(x) Hyperbolic Tangent of x \n         csch(x) Hyperbolic Cosecant of x \n         sech(x) Hyperbolic Secant of x \n         coth(x) Hyperbolic Cotangent of x \n         asinh(x) Inverse Hyperbolic Sine of x \n         acosh(x) Inverse Hyperbolic Cosine of x \n         atanh(x) Inverse Hyperbolic Tangent of x \n         acsch(x) Inverse Hyperbolic Cosecant of x \n         asech(x) Inverse Hyperbolic Secant of x \n         acoth(x) Inverse Hyperbolic Cotangent of x",
            "title": "Built-in Functions"
        },
        {
            "location": "/references/expression_reference/#built-in-constants",
            "text": "Yob expressions can contain any of these built-in constants:  \n     Name Numeric Value Accepted Formats \n     \n         E 2.71828182846 E, e \n         Pi 3.14159265359 PI, pi, \u03c0 \n         Tau 6.28318530718 TAU, tau, \u03c4 \n         Phi 1.61803398874 PHI, phi, \u03c6, \u03d5",
            "title": "Built-in Constants"
        },
        {
            "location": "/references/curve_fit_reference/",
            "text": "Curve Fit Reference\n\n\nCurve Fits are a key feature for Yob.  They are setup to work well \"right out of the box,\" but they are also highly customizable.  This guide is meant to serve as a reference for using Curve Fits.  If you are new using Curve Fits, you may want to check out one of the following tutorials first:\n\n\n\n\nGetting Started - Finding Project Distance\n\n\nAdvanced Curve Fits\n\n\n\n\n\n\nGeneral Rules\n\n\n\n\nAt a minimum, Curve Fits need to know which \nData Set\n to use, and what type of \nModel\n to fit to the data.\n\n\nCurve Fits need sufficient data to work properly.  In general, complex models need more data than simple models.\n\n\n\n\n\n\nBuilt-in Models\n\n\nCurve Fits come with the following built-in models:\n\n\n\n    \nModel Name\nExpression\n\n    \n\n        \nConstant\ncf(x) = C\n\n        \nProportional\ncf(x) = A*x\n\n        \nLinear\ncf(x) = A*x + B\n\n        \nQuadratic\ncf(x) = A*x^2 + B*x + C\n\n        \nCubic\ncf(x) = A*x^3 + B*x^2 + C*x + D\n\n        \nQuartic\ncf(x) = A*x^4 + B*x^3 + C*x^2 + D*x + F\n\n        \nQuintic\ncf(x) = A*x^5 + B*x^4 + C*x^3 + D*x^2 + F*x + G\n\n        \nPower\ncf(x) = A*x^B\n\n        \nInverse\ncf(x) = A / x\n\n        \nInverse Square\ncf(x) = A / (x^2)\n\n        \nSinusoid\ncf(x) = A*sin(B*x + C) + D\n\n        \nExponential\ncf(x) = A*B^x\n\n        \nNatural Exponential\ncf(x) = A*e^(B*x)\n\n        \nLogarithmic\ncf(x) = A + B*log(x)\n\n        \nNatural Logarithmic\ncf(x) = A + B*ln(x)\n\n        \nGaussian\ncf(x) = A*e^(-(x-B)^2 / C^2) + D\n\n        \nNormalized Gaussian\ncf(x) = (1 / (S*sqrt(2*\u03c0))) * e^(-(x-M)^2 / (2*S^2))\n\n        \nLogistic\ncf(x) = A / (1 + e^(-B*x + C))\n\n    \n\n\n\n\n\nCustom Models\n\n\nCurve Fits also support user-defined models.  Note that all the rules of Yob expressions apply.  See the \nExpression Reference\n for more details.\n\n\n\n\n\n\n\nRegression Methods\n\n\nCurve fits attempt to find the best model parameters by minimizing the sum of the differences between the outputs and predicted outputs (residuals) in some form or another.\n\n\n\n\n\nYob supports several different methods of solving this problem, but by far the most common (and default) is the Ordinary Least Squares (OLS) algorithm.  More details for each method are described below.\n\n\nOLS - Ordinary Least Squares\n\n\nThe \nOrdinary Least Squares\n algorithm is the most robust and general purpose algorithm, making it suitable for almost any data.  It finds the best model parameters by minimizing the sum of the \nsquared\n residuals.  In mathematical terms, it tries to minimize \n.  Since the residuals are squared, points that are further away from the curve are more harshly penalized than points that are close.\n\n\nLAD - Least Absolute Deviations\n\n\nThe \nLeast Absolute Deviations\n algorithm attempts to minimize the sum of the absolute residuals, as opposed to the squared residuals like OLS.  In mathematical terms, it tries to minimize \n.  Since the residuals are not squared, this algorithm can handle outliers marginally better than OLS, \nhowever\n, unlike OLS, there are some cases where multiple solutions exist which can cause \ninstability\n.\n\n\nWLS_1Y - Weighted Least Squares, 1 / Y\n\n\nBoth OLS and LAD assume that error is distributed evenly throughout the data, which is not always the case.  Take a look at the following data for example:\n\n\n\n\n\nYou can see that the error gets larger as Y gets larger.  The \nWeighted Least Squares\n algorithm is a variation on OLS that addresses this problem by weighting each residual so that it pays extra attention to data points that have small Y values, and pays less attention to points with large Y values, since it is assumed that they have greater amounts of error.  In mathematical terms, the algorithm tries to minimize \n.  For this particular version of WLS, \n.  The use cases of this algorithm are more limited than OLS, but recoginzing when it's appropriate to apply it can make a big difference in your experiment.  This is demonstrated graphically in the next variation of WLS below.\n\n\nWLS_1Y2 - Weighted Least Squares, 1 / Y\n2\n\n\nThis variation on WLS functions just like the previous one, the only difference being that \n.  The graph below shows the differences between a line fitted with OLS and a line fitted with WLS, using the data from the previous example:\n\n\n\n\n\n\n\nGuess Parameters\n\n\nThe curve fitting algorithms in Yob work by taking an intial set of parameters (or guess parameters) for a model, and iteratively improving them until the optimal parameters are found.  The following example illustrates this concept:\n\n\nSuppose we have some data that we are trying to fit a sinusoid model to.  The sinusoid model is expressed by \nA*sin(B*x + C) + D\n, which means that the model parameters are A, B, C, and D.  If we pick a few reasonable values for these parameters we might get a curve like the green dashed line below.  Using this starting point, Yob will repeatedly try new values for the parameters that are in the neighborhood of the intial values.  If the new values result in a curve that better fits the data, Yob will use those values as the new starting point and continue searching for better ones.\n\n\nWhen Yob can no longer improve the model, Yob will display the fitted model in the graph preview (here it is the solid blue line), and display the optimal parameter values in the \nParameter Output section\n.\n\n\n\n\n\nManual vs Automatic\n\n\nBy default, Curve Fits automatically generate guess parameters for you.  However, if you wish to supply your own guess parameters, you can check the \nManual Guess\n check box and edit the number fields below it:\n\n\n\n\n\n\n\nNote\n\n\nFor all of the built-in models, you shouldn't have to worry about picking guess parameters since Yob automatically picks good guesses for them.  \nHowever\n, since picking guess parameters requires extra knowlege about the behavior of the model, Yob cannot automatically pick guess parameters for \ncustom models\n.  (At least, not good ones.)\n\n\n\n\n\n\nParameter Output\n\n\nThe fitted parameters of a Curve Fit can be found in the Parameter Output section.  The example below shows the parameters for a quadratic model:\n\n\n\n\n\nAlong with the fitted parameters, various metrics for goodness of fit are presented, including the \nRoot Mean Square Error\n (RMSE), the \nCoefficient of Determination\n (R\n2\n), and the \nCorrelation Coefficient\n (R).",
            "title": "Curve Fit Reference"
        },
        {
            "location": "/references/curve_fit_reference/#curve-fit-reference",
            "text": "Curve Fits are a key feature for Yob.  They are setup to work well \"right out of the box,\" but they are also highly customizable.  This guide is meant to serve as a reference for using Curve Fits.  If you are new using Curve Fits, you may want to check out one of the following tutorials first:   Getting Started - Finding Project Distance  Advanced Curve Fits",
            "title": "Curve Fit Reference"
        },
        {
            "location": "/references/curve_fit_reference/#general-rules",
            "text": "At a minimum, Curve Fits need to know which  Data Set  to use, and what type of  Model  to fit to the data.  Curve Fits need sufficient data to work properly.  In general, complex models need more data than simple models.",
            "title": "General Rules"
        },
        {
            "location": "/references/curve_fit_reference/#built-in-models",
            "text": "Curve Fits come with the following built-in models:  \n     Model Name Expression \n     \n         Constant cf(x) = C \n         Proportional cf(x) = A*x \n         Linear cf(x) = A*x + B \n         Quadratic cf(x) = A*x^2 + B*x + C \n         Cubic cf(x) = A*x^3 + B*x^2 + C*x + D \n         Quartic cf(x) = A*x^4 + B*x^3 + C*x^2 + D*x + F \n         Quintic cf(x) = A*x^5 + B*x^4 + C*x^3 + D*x^2 + F*x + G \n         Power cf(x) = A*x^B \n         Inverse cf(x) = A / x \n         Inverse Square cf(x) = A / (x^2) \n         Sinusoid cf(x) = A*sin(B*x + C) + D \n         Exponential cf(x) = A*B^x \n         Natural Exponential cf(x) = A*e^(B*x) \n         Logarithmic cf(x) = A + B*log(x) \n         Natural Logarithmic cf(x) = A + B*ln(x) \n         Gaussian cf(x) = A*e^(-(x-B)^2 / C^2) + D \n         Normalized Gaussian cf(x) = (1 / (S*sqrt(2*\u03c0))) * e^(-(x-M)^2 / (2*S^2)) \n         Logistic cf(x) = A / (1 + e^(-B*x + C))",
            "title": "Built-in Models"
        },
        {
            "location": "/references/curve_fit_reference/#custom-models",
            "text": "Curve Fits also support user-defined models.  Note that all the rules of Yob expressions apply.  See the  Expression Reference  for more details.",
            "title": "Custom Models"
        },
        {
            "location": "/references/curve_fit_reference/#regression-methods",
            "text": "Curve fits attempt to find the best model parameters by minimizing the sum of the differences between the outputs and predicted outputs (residuals) in some form or another.   Yob supports several different methods of solving this problem, but by far the most common (and default) is the Ordinary Least Squares (OLS) algorithm.  More details for each method are described below.",
            "title": "Regression Methods"
        },
        {
            "location": "/references/curve_fit_reference/#ols-ordinary-least-squares",
            "text": "The  Ordinary Least Squares  algorithm is the most robust and general purpose algorithm, making it suitable for almost any data.  It finds the best model parameters by minimizing the sum of the  squared  residuals.  In mathematical terms, it tries to minimize  .  Since the residuals are squared, points that are further away from the curve are more harshly penalized than points that are close.",
            "title": "OLS - Ordinary Least Squares"
        },
        {
            "location": "/references/curve_fit_reference/#lad-least-absolute-deviations",
            "text": "The  Least Absolute Deviations  algorithm attempts to minimize the sum of the absolute residuals, as opposed to the squared residuals like OLS.  In mathematical terms, it tries to minimize  .  Since the residuals are not squared, this algorithm can handle outliers marginally better than OLS,  however , unlike OLS, there are some cases where multiple solutions exist which can cause  instability .",
            "title": "LAD - Least Absolute Deviations"
        },
        {
            "location": "/references/curve_fit_reference/#wls_1y-weighted-least-squares-1-y",
            "text": "Both OLS and LAD assume that error is distributed evenly throughout the data, which is not always the case.  Take a look at the following data for example:   You can see that the error gets larger as Y gets larger.  The  Weighted Least Squares  algorithm is a variation on OLS that addresses this problem by weighting each residual so that it pays extra attention to data points that have small Y values, and pays less attention to points with large Y values, since it is assumed that they have greater amounts of error.  In mathematical terms, the algorithm tries to minimize  .  For this particular version of WLS,  .  The use cases of this algorithm are more limited than OLS, but recoginzing when it's appropriate to apply it can make a big difference in your experiment.  This is demonstrated graphically in the next variation of WLS below.",
            "title": "WLS_1Y - Weighted Least Squares, 1 / Y"
        },
        {
            "location": "/references/curve_fit_reference/#wls_1y2-weighted-least-squares-1-y2",
            "text": "This variation on WLS functions just like the previous one, the only difference being that  .  The graph below shows the differences between a line fitted with OLS and a line fitted with WLS, using the data from the previous example:",
            "title": "WLS_1Y2 - Weighted Least Squares, 1 / Y2"
        },
        {
            "location": "/references/curve_fit_reference/#guess-parameters",
            "text": "The curve fitting algorithms in Yob work by taking an intial set of parameters (or guess parameters) for a model, and iteratively improving them until the optimal parameters are found.  The following example illustrates this concept:  Suppose we have some data that we are trying to fit a sinusoid model to.  The sinusoid model is expressed by  A*sin(B*x + C) + D , which means that the model parameters are A, B, C, and D.  If we pick a few reasonable values for these parameters we might get a curve like the green dashed line below.  Using this starting point, Yob will repeatedly try new values for the parameters that are in the neighborhood of the intial values.  If the new values result in a curve that better fits the data, Yob will use those values as the new starting point and continue searching for better ones.  When Yob can no longer improve the model, Yob will display the fitted model in the graph preview (here it is the solid blue line), and display the optimal parameter values in the  Parameter Output section .",
            "title": "Guess Parameters"
        },
        {
            "location": "/references/curve_fit_reference/#manual-vs-automatic",
            "text": "By default, Curve Fits automatically generate guess parameters for you.  However, if you wish to supply your own guess parameters, you can check the  Manual Guess  check box and edit the number fields below it:    Note  For all of the built-in models, you shouldn't have to worry about picking guess parameters since Yob automatically picks good guesses for them.   However , since picking guess parameters requires extra knowlege about the behavior of the model, Yob cannot automatically pick guess parameters for  custom models .  (At least, not good ones.)",
            "title": "Manual vs Automatic"
        },
        {
            "location": "/references/curve_fit_reference/#parameter-output",
            "text": "The fitted parameters of a Curve Fit can be found in the Parameter Output section.  The example below shows the parameters for a quadratic model:   Along with the fitted parameters, various metrics for goodness of fit are presented, including the  Root Mean Square Error  (RMSE), the  Coefficient of Determination  (R 2 ), and the  Correlation Coefficient  (R).",
            "title": "Parameter Output"
        },
        {
            "location": "/references/calculated_column_reference/",
            "text": "Calculated Column Reference\n\n\nCalculated Columns allow you to generate new columns from other columns, saving you the time of manual data entry.  This reference will discuss all that you need to know in order to make use of this powerful feature.\n\n\nIf you are new to Calculated Columns, you may want to check the \nAdvanced Data Sets tutorial\n to see them in action.\n\n\n\n\nMaking a Calculated Column\n\n\nEach column of a Data Set has a calculated column menu that can be opened by clicking on the calculator icon in the top right of the column header. When you do so, you should see the following dialog:\n\n\n\n\n\nThe menu is composed of three components:\n...\n...\n...\n\n\n\n\nHow Columns are Calculated\n\n\nWhen columns are being calculated, the values are copied over \nrow by row\n.  For example, if you had a column expression, \nd2c2 = d1c2/10\n, this is how the data would be transferred:\n\n\n\n\n\nIn situations where the calculated column depends on multiple columns, the same \nrow by row\n process is used:\n\n\n\n\n\n\n\nColumns with Bad Values\n\n\nBecause of the freedom we allow users in our table editor, it is possible to create columns with different lengths or missing/nonsense values.  Yob will do its best to copy the data over in the same \nrow by row\n fashion, but if it doesn't know what to do for a particular cell, the calculated value will be \"NaN\", for \"Not a Number\".\n\n\n\n\n\n\n\n\nExamples\n\n\nCalculated Columns are best understood through examples.  Check out the \nAdvanced Data Sets tutorial\n to see them in action.",
            "title": "Calculated Column Reference"
        },
        {
            "location": "/references/calculated_column_reference/#calculated-column-reference",
            "text": "Calculated Columns allow you to generate new columns from other columns, saving you the time of manual data entry.  This reference will discuss all that you need to know in order to make use of this powerful feature.  If you are new to Calculated Columns, you may want to check the  Advanced Data Sets tutorial  to see them in action.",
            "title": "Calculated Column Reference"
        },
        {
            "location": "/references/calculated_column_reference/#making-a-calculated-column",
            "text": "Each column of a Data Set has a calculated column menu that can be opened by clicking on the calculator icon in the top right of the column header. When you do so, you should see the following dialog:   The menu is composed of three components:\n...\n...\n...",
            "title": "Making a Calculated Column"
        },
        {
            "location": "/references/calculated_column_reference/#how-columns-are-calculated",
            "text": "When columns are being calculated, the values are copied over  row by row .  For example, if you had a column expression,  d2c2 = d1c2/10 , this is how the data would be transferred:   In situations where the calculated column depends on multiple columns, the same  row by row  process is used:    Columns with Bad Values  Because of the freedom we allow users in our table editor, it is possible to create columns with different lengths or missing/nonsense values.  Yob will do its best to copy the data over in the same  row by row  fashion, but if it doesn't know what to do for a particular cell, the calculated value will be \"NaN\", for \"Not a Number\".",
            "title": "How Columns are Calculated"
        },
        {
            "location": "/references/calculated_column_reference/#examples",
            "text": "Calculated Columns are best understood through examples.  Check out the  Advanced Data Sets tutorial  to see them in action.",
            "title": "Examples"
        },
        {
            "location": "/about/known_issues/",
            "text": "Known Issues\n\n\nThis page is dedicated to keeping you updated on any bugs that have been encountered with Yob.\n\n\n\n\nBrowser Support\n\n\nYob, being new software, has yet to go through extensive testing on different browsers.  Currently, \nGoogle Chrome\n is our only officially supported browser.  Yob will still work for the most part in other browsers, but we \ncannot guarantee\n that it will be fully functional.  If we gain enough users, we will expand our offical support to other browsers such as FireFox.\n\n\n\n\nKnown Issues\n\n\n\n\nZooming in to extremely small viewing windows may crash your browser\n\n\nAt certain render resolutions, Functions and Curve Fits may render oddly.\n\n\nLoading Curve Fits from a saved graph will automatically make models custom.",
            "title": "Known Issues"
        },
        {
            "location": "/about/known_issues/#known-issues",
            "text": "This page is dedicated to keeping you updated on any bugs that have been encountered with Yob.",
            "title": "Known Issues"
        },
        {
            "location": "/about/known_issues/#browser-support",
            "text": "Yob, being new software, has yet to go through extensive testing on different browsers.  Currently,  Google Chrome  is our only officially supported browser.  Yob will still work for the most part in other browsers, but we  cannot guarantee  that it will be fully functional.  If we gain enough users, we will expand our offical support to other browsers such as FireFox.",
            "title": "Browser Support"
        },
        {
            "location": "/about/known_issues/#known-issues_1",
            "text": "Zooming in to extremely small viewing windows may crash your browser  At certain render resolutions, Functions and Curve Fits may render oddly.  Loading Curve Fits from a saved graph will automatically make models custom.",
            "title": "Known Issues"
        },
        {
            "location": "/about/about/",
            "text": "About\n\n\nYob was a project started by \nTanner Nielsen\n and \nJordan Hendrickson\n in the spring of 2014, motivated by our appreciation for the teacher of our high school physics class, as well as the dislike for the graphing software he had us use.\n\n\n\n\nDevelopment\n\n\nWhen Yob began, we were developing in Java and our plans for the software were much too ambitious:  We wanted not only to build a better graphing application, but also a complete assignment management platform through which the teacher could distribute their assignments and the students could complete them.  We weren't experienced developers, but we managed to hack together an account system and beginnings of an assignment editor over the summer.  The old login screen looked like this:\n\n\n\n\n\nTo our surprise, the school decided to replace all of their laptops with Chromebooks when the next fall came around, which Java applications were not easily compatible with.  Moreover, all of the teachers had started using Google Classroom, which made our software largely irrelevant.\n\n\nThis was a huge setback for us and we nearly gave up, but we decided to start over and build our app with JavaScript, an entirely new language to us at the time.  We also chose to scale back and focus on making a graphing application in the form of a \nGoogle Docs Add-on\n to complement Google Classroom.\n\n\nIt was this decision and a few years of development that got the project to where it is today.  If you're interested to learn a little more about Yob's development, \na poster\n was made detailing more of our development process.\n\n\n\n\nAcknowledgements\n\n\nWe owe a great debt of gratitude to \nMr. Dean Roush\n, the Physics teacher at Luck High School, for helping us test and shape the software.  This project would have never gotten off the ground without his patience and trust, would have never progressed so far without his willingness to test our software as it developed.",
            "title": "About"
        },
        {
            "location": "/about/about/#about",
            "text": "Yob was a project started by  Tanner Nielsen  and  Jordan Hendrickson  in the spring of 2014, motivated by our appreciation for the teacher of our high school physics class, as well as the dislike for the graphing software he had us use.",
            "title": "About"
        },
        {
            "location": "/about/about/#development",
            "text": "When Yob began, we were developing in Java and our plans for the software were much too ambitious:  We wanted not only to build a better graphing application, but also a complete assignment management platform through which the teacher could distribute their assignments and the students could complete them.  We weren't experienced developers, but we managed to hack together an account system and beginnings of an assignment editor over the summer.  The old login screen looked like this:   To our surprise, the school decided to replace all of their laptops with Chromebooks when the next fall came around, which Java applications were not easily compatible with.  Moreover, all of the teachers had started using Google Classroom, which made our software largely irrelevant.  This was a huge setback for us and we nearly gave up, but we decided to start over and build our app with JavaScript, an entirely new language to us at the time.  We also chose to scale back and focus on making a graphing application in the form of a  Google Docs Add-on  to complement Google Classroom.  It was this decision and a few years of development that got the project to where it is today.  If you're interested to learn a little more about Yob's development,  a poster  was made detailing more of our development process.",
            "title": "Development"
        },
        {
            "location": "/about/about/#acknowledgements",
            "text": "We owe a great debt of gratitude to  Mr. Dean Roush , the Physics teacher at Luck High School, for helping us test and shape the software.  This project would have never gotten off the ground without his patience and trust, would have never progressed so far without his willingness to test our software as it developed.",
            "title": "Acknowledgements"
        }
    ]
}
